---
import { cn } from '../utils/utils';
import { cva, type VariantProps } from 'class-variance-authority';
import type { HTMLAttributes } from 'astro/types';

const buttonVariants = cva(
  'cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-bold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        outline:
          'outline-outline outline bg-background hover:bg-secondary/90 hover:text-secondary-foreground',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary-muted underline-offset-4 hover:underline hover:text-primary',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        warning: 'bg-warning text-warning-foreground hover:bg-warning/90',
        success: 'bg-success text-success-foreground hover:bg-success/90',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

export interface Props
  extends HTMLAttributes<'button'>,
    VariantProps<typeof buttonVariants> {
  class?: string;
  onClick?: () => void;
}

const {
  class: className,
  variant = 'default',
  size = 'default',
  onClick,
  ...props
} = Astro.props;
---

<button class={cn(buttonVariants({ variant, size, className }))} {...props}>
  <slot />
</button>
