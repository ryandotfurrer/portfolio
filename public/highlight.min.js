/*!
  Highlight.js v11.8.0 (git: 65687a907b)
  (c) 2006-2023 undefined and other contributors
  License: BSD-3-Clause
 */
var hljs = (function () {
  "use strict";
  function e(t) {
    return (
      t instanceof Map
        ? (t.clear =
            t.delete =
            t.set =
              () => {
                throw Error("map is read-only");
              })
        : t instanceof Set &&
          (t.add =
            t.clear =
            t.delete =
              () => {
                throw Error("set is read-only");
              }),
      Object.freeze(t),
      Object.getOwnPropertyNames(t).forEach((n) => {
        const i = t[n],
          s = typeof i;
        ("object" !== s && "function" !== s) || Object.isFrozen(i) || e(i);
      }),
      t
    );
  }
  class t {
    constructor(e) {
      void 0 === e.data && (e.data = {}),
        (this.data = e.data),
        (this.isMatchIgnored = !1);
    }
    ignoreMatch() {
      this.isMatchIgnored = !0;
    }
  }
  function n(e) {
    return e
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#x27;");
  }
  function i(e, ...t) {
    const n = Object.create(null);
    for (const t in e) n[t] = e[t];
    return (
      t.forEach((e) => {
        for (const t in e) n[t] = e[t];
      }),
      n
    );
  }
  const s = (e) => !!e.scope;
  class o {
    constructor(e, t) {
      (this.buffer = ""), (this.classPrefix = t.classPrefix), e.walk(this);
    }
    addText(e) {
      this.buffer += n(e);
    }
    openNode(e) {
      if (!s(e)) return;
      const t = ((e, { prefix: t }) => {
        if (e.startsWith("language:"))
          return e.replace("language:", "language-");
        if (e.includes(".")) {
          const n = e.split(".");
          return [
            `${t}${n.shift()}`,
            ...n.map((e, t) => `${e}${"_".repeat(t + 1)}`),
          ].join(" ");
        }
        return `${t}${e}`;
      })(e.scope, { prefix: this.classPrefix });
      this.span(t);
    }
    closeNode(e) {
      s(e) && (this.buffer += "</span>");
    }
    value() {
      return this.buffer;
    }
    span(e) {
      this.buffer += `<span class="${e}">`;
    }
  }
  const r = (e = {}) => {
    const t = { children: [] };
    return Object.assign(t, e), t;
  };
  class a {
    constructor() {
      (this.rootNode = r()), (this.stack = [this.rootNode]);
    }
    get top() {
      return this.stack[this.stack.length - 1];
    }
    get root() {
      return this.rootNode;
    }
    add(e) {
      this.top.children.push(e);
    }
    openNode(e) {
      const t = r({ scope: e });
      this.add(t), this.stack.push(t);
    }
    closeNode() {
      if (this.stack.length > 1) return this.stack.pop();
    }
    closeAllNodes() {
      for (; this.closeNode(); );
    }
    toJSON() {
      return JSON.stringify(this.rootNode, null, 4);
    }
    walk(e) {
      return this.constructor._walk(e, this.rootNode);
    }
    static _walk(e, t) {
      return (
        "string" == typeof t
          ? e.addText(t)
          : t.children &&
            (e.openNode(t),
            t.children.forEach((t) => this._walk(e, t)),
            e.closeNode(t)),
        e
      );
    }
    static _collapse(e) {
      "string" != typeof e &&
        e.children &&
        (e.children.every((e) => "string" == typeof e)
          ? (e.children = [e.children.join("")])
          : e.children.forEach((e) => {
              a._collapse(e);
            }));
    }
  }
  class c extends a {
    constructor(e) {
      super(), (this.options = e);
    }
    addText(e) {
      "" !== e && this.add(e);
    }
    startScope(e) {
      this.openNode(e);
    }
    endScope() {
      this.closeNode();
    }
    __addSublanguage(e, t) {
      const n = e.root;
      t && (n.scope = "language:" + t), this.add(n);
    }
    toHTML() {
      return new o(this, this.options).value();
    }
    finalize() {
      return this.closeAllNodes(), !0;
    }
  }
  function l(e) {
    return e ? ("string" == typeof e ? e : e.source) : null;
  }
  function g(e) {
    return h("(?=", e, ")");
  }
  function u(e) {
    return h("(?:", e, ")*");
  }
  function d(e) {
    return h("(?:", e, ")?");
  }
  function h(...e) {
    return e.map((e) => l(e)).join("");
  }
  function f(...e) {
    const t = ((e) => {
      const t = e[e.length - 1];
      return "object" == typeof t && t.constructor === Object
        ? (e.splice(e.length - 1, 1), t)
        : {};
    })(e);
    return "(" + (t.capture ? "" : "?:") + e.map((e) => l(e)).join("|") + ")";
  }
  function p(e) {
    return RegExp(e.toString() + "|").exec("").length - 1;
  }
  const b = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
  function m(e, { joinWith: t }) {
    let n = 0;
    return e
      .map((e) => {
        n += 1;
        const t = n;
        let i = l(e),
          s = "";
        for (; i.length > 0; ) {
          const e = b.exec(i);
          if (!e) {
            s += i;
            break;
          }
          (s += i.substring(0, e.index)),
            (i = i.substring(e.index + e[0].length)),
            "\\" === e[0][0] && e[1]
              ? (s += "\\" + (Number(e[1]) + t))
              : ((s += e[0]), "(" === e[0] && n++);
        }
        return s;
      })
      .map((e) => `(${e})`)
      .join(t);
  }
  const E = "[a-zA-Z]\\w*",
    x = "[a-zA-Z_]\\w*",
    w = "\\b\\d+(\\.\\d+)?",
    y =
      "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
    _ = "\\b(0b[01]+)",
    O = {
      begin: "\\\\[\\s\\S]",
      relevance: 0,
    },
    k = {
      scope: "string",
      begin: "'",
      end: "'",
      illegal: "\\n",
      contains: [O],
    },
    N = {
      scope: "string",
      begin: '"',
      end: '"',
      illegal: "\\n",
      contains: [O],
    },
    S = (e, t, n = {}) => {
      const s = i({ scope: "comment", begin: e, end: t, contains: [] }, n);
      s.contains.push({
        scope: "doctag",
        begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
        end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
        excludeBegin: !0,
        relevance: 0,
      });
      const o = f(
        "I",
        "a",
        "is",
        "so",
        "us",
        "to",
        "at",
        "if",
        "in",
        "it",
        "on",
        /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
        /[A-Za-z]+[-][a-z]+/,
        /[A-Za-z][a-z]{2,}/,
      );
      return (
        s.contains.push({
          begin: h(/[ ]+/, "(", o, /[.]?[:]?([.][ ]|[ ])/, "){3}"),
        }),
        s
      );
    },
    v = S("//", "$"),
    M = S("/\\*", "\\*/"),
    R = S("#", "$");
  var j = Object.freeze({
    __proto__: null,
    MATCH_NOTHING_RE: /\b\B/,
    IDENT_RE: E,
    UNDERSCORE_IDENT_RE: x,
    NUMBER_RE: w,
    C_NUMBER_RE: y,
    BINARY_NUMBER_RE: _,
    RE_STARTERS_RE:
      "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",
    SHEBANG: (e = {}) => {
      const t = /^#![ ]*\//;
      return (
        e.binary && (e.begin = h(t, /.*\b/, e.binary, /\b.*/)),
        i(
          {
            scope: "meta",
            begin: t,
            end: /$/,
            relevance: 0,
            "on:begin": (e, t) => {
              0 !== e.index && t.ignoreMatch();
            },
          },
          e,
        )
      );
    },
    BACKSLASH_ESCAPE: O,
    APOS_STRING_MODE: k,
    QUOTE_STRING_MODE: N,
    PHRASAL_WORDS_MODE: {
      begin:
        /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/,
    },
    COMMENT: S,
    C_LINE_COMMENT_MODE: v,
    C_BLOCK_COMMENT_MODE: M,
    HASH_COMMENT_MODE: R,
    NUMBER_MODE: { scope: "number", begin: w, relevance: 0 },
    C_NUMBER_MODE: { scope: "number", begin: y, relevance: 0 },
    BINARY_NUMBER_MODE: { scope: "number", begin: _, relevance: 0 },
    REGEXP_MODE: {
      begin: /(?=\/[^/\n]*\/)/,
      contains: [
        {
          scope: "regexp",
          begin: /\//,
          end: /\/[gimuy]*/,
          illegal: /\n/,
          contains: [
            O,
            { begin: /\[/, end: /\]/, relevance: 0, contains: [O] },
          ],
        },
      ],
    },
    TITLE_MODE: { scope: "title", begin: E, relevance: 0 },
    UNDERSCORE_TITLE_MODE: { scope: "title", begin: x, relevance: 0 },
    METHOD_GUARD: {
      begin: "\\.\\s*" + x,
      relevance: 0,
    },
    END_SAME_AS_BEGIN: (e) =>
      Object.assign(e, {
        "on:begin": (e, t) => {
          t.data._beginMatch = e[1];
        },
        "on:end": (e, t) => {
          t.data._beginMatch !== e[1] && t.ignoreMatch();
        },
      }),
  });
  function A(e, t) {
    "." === e.input[e.index - 1] && t.ignoreMatch();
  }
  function I(e, t) {
    void 0 !== e.className && ((e.scope = e.className), delete e.className);
  }
  function T(e, t) {
    t &&
      e.beginKeywords &&
      ((e.begin =
        "\\b(" + e.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)"),
      (e.__beforeBegin = A),
      (e.keywords = e.keywords || e.beginKeywords),
      delete e.beginKeywords,
      void 0 === e.relevance && (e.relevance = 0));
  }
  function L(e, t) {
    Array.isArray(e.illegal) && (e.illegal = f(...e.illegal));
  }
  function B(e, t) {
    if (e.match) {
      if (e.begin || e.end)
        throw Error("begin & end are not supported with match");
      (e.begin = e.match), delete e.match;
    }
  }
  function P(e, t) {
    void 0 === e.relevance && (e.relevance = 1);
  }
  const D = (e, t) => {
      if (!e.beforeMatch) return;
      if (e.starts) throw Error("beforeMatch cannot be used with starts");
      const n = Object.assign({}, e);
      Object.keys(e).forEach((t) => {
        delete e[t];
      }),
        (e.keywords = n.keywords),
        (e.begin = h(n.beforeMatch, g(n.begin))),
        (e.starts = {
          relevance: 0,
          contains: [Object.assign(n, { endsParent: !0 })],
        }),
        (e.relevance = 0),
        delete n.beforeMatch;
    },
    H = [
      "of",
      "and",
      "for",
      "in",
      "not",
      "or",
      "if",
      "then",
      "parent",
      "list",
      "value",
    ],
    C = "keyword";
  function $(e, t, n = C) {
    const i = Object.create(null);
    return (
      "string" == typeof e
        ? s(n, e.split(" "))
        : Array.isArray(e)
          ? s(n, e)
          : Object.keys(e).forEach((n) => {
              Object.assign(i, $(e[n], t, n));
            }),
      i
    );
    function s(e, n) {
      t && (n = n.map((e) => e.toLowerCase())),
        n.forEach((t) => {
          const n = t.split("|");
          i[n[0]] = [e, U(n[0], n[1])];
        });
    }
  }
  function U(e, t) {
    return t ? Number(t) : ((e) => H.includes(e.toLowerCase()))(e) ? 0 : 1;
  }
  const z = {},
    W = (e) => {
      console.error(e);
    },
    X = (e, ...t) => {
      console.log("WARN: " + e, ...t);
    },
    G = (e, t) => {
      z[`${e}/${t}`] ||
        (console.log(`Deprecated as of ${e}. ${t}`), (z[`${e}/${t}`] = !0));
    },
    K = Error();
  function F(e, t, { key: n }) {
    let i = 0;
    const s = e[n],
      o = {},
      r = {};
    for (let e = 1; e <= t.length; e++)
      (r[e + i] = s[e]), (o[e + i] = !0), (i += p(t[e - 1]));
    (e[n] = r), (e[n]._emit = o), (e[n]._multi = !0);
  }
  function Z(e) {
    ((e) => {
      e.scope &&
        "object" == typeof e.scope &&
        null !== e.scope &&
        ((e.beginScope = e.scope), delete e.scope);
    })(e),
      "string" == typeof e.beginScope &&
        (e.beginScope = {
          _wrap: e.beginScope,
        }),
      "string" == typeof e.endScope && (e.endScope = { _wrap: e.endScope }),
      ((e) => {
        if (Array.isArray(e.begin)) {
          if (e.skip || e.excludeBegin || e.returnBegin)
            throw (
              (W(
                "skip, excludeBegin, returnBegin not compatible with beginScope: {}",
              ),
              K)
            );
          if ("object" != typeof e.beginScope || null === e.beginScope)
            throw (W("beginScope must be object"), K);
          F(e, e.begin, { key: "beginScope" }),
            (e.begin = m(e.begin, { joinWith: "" }));
        }
      })(e),
      ((e) => {
        if (Array.isArray(e.end)) {
          if (e.skip || e.excludeEnd || e.returnEnd)
            throw (
              (W(
                "skip, excludeEnd, returnEnd not compatible with endScope: {}",
              ),
              K)
            );
          if ("object" != typeof e.endScope || null === e.endScope)
            throw (W("endScope must be object"), K);
          F(e, e.end, { key: "endScope" }),
            (e.end = m(e.end, { joinWith: "" }));
        }
      })(e);
  }
  function V(e) {
    function t(t, n) {
      return RegExp(
        l(t),
        "m" +
          (e.case_insensitive ? "i" : "") +
          (e.unicodeRegex ? "u" : "") +
          (n ? "g" : ""),
      );
    }
    class n {
      constructor() {
        (this.matchIndexes = {}),
          (this.regexes = []),
          (this.matchAt = 1),
          (this.position = 0);
      }
      addRule(e, t) {
        (t.position = this.position++),
          (this.matchIndexes[this.matchAt] = t),
          this.regexes.push([t, e]),
          (this.matchAt += p(e) + 1);
      }
      compile() {
        0 === this.regexes.length && (this.exec = () => null);
        const e = this.regexes.map((e) => e[1]);
        (this.matcherRe = t(m(e, { joinWith: "|" }), !0)), (this.lastIndex = 0);
      }
      exec(e) {
        this.matcherRe.lastIndex = this.lastIndex;
        const t = this.matcherRe.exec(e);
        if (!t) return null;
        const n = t.findIndex((e, t) => t > 0 && void 0 !== e),
          i = this.matchIndexes[n];
        return t.splice(0, n), Object.assign(t, i);
      }
    }
    class s {
      constructor() {
        (this.rules = []),
          (this.multiRegexes = []),
          (this.count = 0),
          (this.lastIndex = 0),
          (this.regexIndex = 0);
      }
      getMatcher(e) {
        if (this.multiRegexes[e]) return this.multiRegexes[e];
        const t = new n();
        return (
          this.rules.slice(e).forEach(([e, n]) => t.addRule(e, n)),
          t.compile(),
          (this.multiRegexes[e] = t),
          t
        );
      }
      resumingScanAtSamePosition() {
        return 0 !== this.regexIndex;
      }
      considerAll() {
        this.regexIndex = 0;
      }
      addRule(e, t) {
        this.rules.push([e, t]), "begin" === t.type && this.count++;
      }
      exec(e) {
        const t = this.getMatcher(this.regexIndex);
        t.lastIndex = this.lastIndex;
        let n = t.exec(e);
        if (this.resumingScanAtSamePosition())
          if (n && n.index === this.lastIndex);
          else {
            const t = this.getMatcher(0);
            (t.lastIndex = this.lastIndex + 1), (n = t.exec(e));
          }
        return (
          n &&
            ((this.regexIndex += n.position + 1),
            this.regexIndex === this.count && this.considerAll()),
          n
        );
      }
    }
    if (
      (e.compilerExtensions || (e.compilerExtensions = []),
      e.contains && e.contains.includes("self"))
    )
      throw Error(
        "ERR: contains `self` is not supported at the top-level of a language.  See documentation.",
      );
    return (
      (e.classNameAliases = i(e.classNameAliases || {})),
      (function n(o, r) {
        const a = o;
        if (o.isCompiled) return a;
        [I, B, Z, D].forEach((e) => e(o, r)),
          e.compilerExtensions.forEach((e) => e(o, r)),
          (o.__beforeBegin = null),
          [T, L, P].forEach((e) => e(o, r)),
          (o.isCompiled = !0);
        let c = null;
        return (
          "object" == typeof o.keywords &&
            o.keywords.$pattern &&
            ((o.keywords = Object.assign({}, o.keywords)),
            (c = o.keywords.$pattern),
            delete o.keywords.$pattern),
          (c = c || /\w+/),
          o.keywords && (o.keywords = $(o.keywords, e.case_insensitive)),
          (a.keywordPatternRe = t(c, !0)),
          r &&
            (o.begin || (o.begin = /\B|\b/),
            (a.beginRe = t(a.begin)),
            o.end || o.endsWithParent || (o.end = /\B|\b/),
            o.end && (a.endRe = t(a.end)),
            (a.terminatorEnd = l(a.end) || ""),
            o.endsWithParent &&
              r.terminatorEnd &&
              (a.terminatorEnd += (o.end ? "|" : "") + r.terminatorEnd)),
          o.illegal && (a.illegalRe = t(o.illegal)),
          o.contains || (o.contains = []),
          (o.contains = [].concat(
            ...o.contains.map((e) =>
              ((e) => (
                e.variants &&
                  !e.cachedVariants &&
                  (e.cachedVariants = e.variants.map((t) =>
                    i(
                      e,
                      {
                        variants: null,
                      },
                      t,
                    ),
                  )),
                e.cachedVariants
                  ? e.cachedVariants
                  : q(e)
                    ? i(e, {
                        starts: e.starts ? i(e.starts) : null,
                      })
                    : Object.isFrozen(e)
                      ? i(e)
                      : e
              ))("self" === e ? o : e),
            ),
          )),
          o.contains.forEach((e) => {
            n(e, a);
          }),
          o.starts && n(o.starts, r),
          (a.matcher = ((e) => {
            const t = new s();
            return (
              e.contains.forEach((e) =>
                t.addRule(e.begin, { rule: e, type: "begin" }),
              ),
              e.terminatorEnd && t.addRule(e.terminatorEnd, { type: "end" }),
              e.illegal && t.addRule(e.illegal, { type: "illegal" }),
              t
            );
          })(a)),
          a
        );
      })(e)
    );
  }
  function q(e) {
    return !!e && (e.endsWithParent || q(e.starts));
  }
  class J extends Error {
    constructor(e, t) {
      super(e), (this.name = "HTMLInjectionError"), (this.html = t);
    }
  }
  const Y = n,
    Q = i,
    ee = Symbol("nomatch"),
    te = (n) => {
      const i = Object.create(null),
        s = Object.create(null),
        o = [];
      let r = !0;
      const a =
          "Could not find the language '{}', did you forget to load/include a language module?",
        l = {
          disableAutodetect: !0,
          name: "Plain text",
          contains: [],
        };
      let p = {
        ignoreUnescapedHTML: !1,
        throwUnescapedHTML: !1,
        noHighlightRe: /^(no-?highlight)$/i,
        languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
        classPrefix: "hljs-",
        cssSelector: "pre code",
        languages: null,
        __emitter: c,
      };
      function b(e) {
        return p.noHighlightRe.test(e);
      }
      function m(e, t, n) {
        let i = "",
          s = "";
        "object" == typeof t
          ? ((i = e), (n = t.ignoreIllegals), (s = t.language))
          : (G("10.7.0", "highlight(lang, code, ...args) has been deprecated."),
            G(
              "10.7.0",
              "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277",
            ),
            (s = e),
            (i = t)),
          void 0 === n && (n = !0);
        const o = { code: i, language: s };
        S("before:highlight", o);
        const r = o.result ? o.result : E(o.language, o.code, n);
        return (r.code = o.code), S("after:highlight", r), r;
      }
      function E(e, n, s, o) {
        const c = Object.create(null);
        function l() {
          if (!S.keywords) return void M.addText(R);
          let e = 0;
          S.keywordPatternRe.lastIndex = 0;
          let t = S.keywordPatternRe.exec(R),
            n = "";
          for (; t; ) {
            n += R.substring(e, t.index);
            const s = _.case_insensitive ? t[0].toLowerCase() : t[0],
              o = ((i = s), S.keywords[i]);
            if (o) {
              const [e, i] = o;
              if (
                (M.addText(n),
                (n = ""),
                (c[s] = (c[s] || 0) + 1),
                c[s] <= 7 && (j += i),
                e.startsWith("_"))
              )
                n += t[0];
              else {
                const n = _.classNameAliases[e] || e;
                u(t[0], n);
              }
            } else n += t[0];
            (e = S.keywordPatternRe.lastIndex),
              (t = S.keywordPatternRe.exec(R));
          }
          var i;
          (n += R.substring(e)), M.addText(n);
        }
        function g() {
          null != S.subLanguage
            ? (() => {
                if ("" === R) return;
                let e = null;
                if ("string" == typeof S.subLanguage) {
                  if (!i[S.subLanguage]) return void M.addText(R);
                  (e = E(S.subLanguage, R, !0, v[S.subLanguage])),
                    (v[S.subLanguage] = e._top);
                } else e = x(R, S.subLanguage.length ? S.subLanguage : null);
                S.relevance > 0 && (j += e.relevance),
                  M.__addSublanguage(e._emitter, e.language);
              })()
            : l(),
            (R = "");
        }
        function u(e, t) {
          "" !== e && (M.startScope(t), M.addText(e), M.endScope());
        }
        function d(e, t) {
          let n = 1;
          const i = t.length - 1;
          for (; n <= i; ) {
            if (!e._emit[n]) {
              n++;
              continue;
            }
            const i = _.classNameAliases[e[n]] || e[n],
              s = t[n];
            i ? u(s, i) : ((R = s), l(), (R = "")), n++;
          }
        }
        function h(e, t) {
          return (
            e.scope &&
              "string" == typeof e.scope &&
              M.openNode(_.classNameAliases[e.scope] || e.scope),
            e.beginScope &&
              (e.beginScope._wrap
                ? (u(
                    R,
                    _.classNameAliases[e.beginScope._wrap] ||
                      e.beginScope._wrap,
                  ),
                  (R = ""))
                : e.beginScope._multi && (d(e.beginScope, t), (R = ""))),
            (S = Object.create(e, {
              parent: {
                value: S,
              },
            })),
            S
          );
        }
        function f(e, n, i) {
          let s = ((e, t) => {
            const n = e && e.exec(t);
            return n && 0 === n.index;
          })(e.endRe, i);
          if (s) {
            if (e["on:end"]) {
              const i = new t(e);
              e["on:end"](n, i), i.isMatchIgnored && (s = !1);
            }
            if (s) {
              for (; e.endsParent && e.parent; ) e = e.parent;
              return e;
            }
          }
          if (e.endsWithParent) return f(e.parent, n, i);
        }
        function b(e) {
          return 0 === S.matcher.regexIndex ? ((R += e[0]), 1) : ((T = !0), 0);
        }
        function m(e) {
          const t = e[0],
            i = n.substring(e.index),
            s = f(S, e, i);
          if (!s) return ee;
          const o = S;
          S.endScope && S.endScope._wrap
            ? (g(), u(t, S.endScope._wrap))
            : S.endScope && S.endScope._multi
              ? (g(), d(S.endScope, e))
              : o.skip
                ? (R += t)
                : (o.returnEnd || o.excludeEnd || (R += t),
                  g(),
                  o.excludeEnd && (R = t));
          do {
            S.scope && M.closeNode(),
              S.skip || S.subLanguage || (j += S.relevance),
              (S = S.parent);
          } while (S !== s.parent);
          return s.starts && h(s.starts, e), o.returnEnd ? 0 : t.length;
        }
        let w = {};
        function y(i, o) {
          const a = o && o[0];
          if (((R += i), null == a)) return g(), 0;
          if (
            "begin" === w.type &&
            "end" === o.type &&
            w.index === o.index &&
            "" === a
          ) {
            if (((R += n.slice(o.index, o.index + 1)), !r)) {
              const t = Error(`0 width match regex (${e})`);
              throw ((t.languageName = e), (t.badRule = w.rule), t);
            }
            return 1;
          }
          if (((w = o), "begin" === o.type))
            return ((e) => {
              const n = e[0],
                i = e.rule,
                s = new t(i),
                o = [i.__beforeBegin, i["on:begin"]];
              for (const t of o)
                if (t && (t(e, s), s.isMatchIgnored)) return b(n);
              return (
                i.skip
                  ? (R += n)
                  : (i.excludeBegin && (R += n),
                    g(),
                    i.returnBegin || i.excludeBegin || (R = n)),
                h(i, e),
                i.returnBegin ? 0 : n.length
              );
            })(o);
          if ("illegal" === o.type && !s) {
            const e = Error(
              'Illegal lexeme "' +
                a +
                '" for mode "' +
                (S.scope || "<unnamed>") +
                '"',
            );
            throw ((e.mode = S), e);
          }
          if ("end" === o.type) {
            const e = m(o);
            if (e !== ee) return e;
          }
          if ("illegal" === o.type && "" === a) return 1;
          if (I > 1e5 && I > 3 * o.index)
            throw Error(
              "potential infinite loop, way more iterations than matches",
            );
          return (R += a), a.length;
        }
        const _ = O(e);
        if (!_)
          throw (W(a.replace("{}", e)), Error('Unknown language: "' + e + '"'));
        const k = V(_);
        let N = "",
          S = o || k;
        const v = {},
          M = new p.__emitter(p);
        (() => {
          const e = [];
          for (let t = S; t !== _; t = t.parent) t.scope && e.unshift(t.scope);
          e.forEach((e) => M.openNode(e));
        })();
        let R = "",
          j = 0,
          A = 0,
          I = 0,
          T = !1;
        try {
          if (_.__emitTokens) _.__emitTokens(n, M);
          else {
            for (S.matcher.considerAll(); ; ) {
              I++,
                T ? (T = !1) : S.matcher.considerAll(),
                (S.matcher.lastIndex = A);
              const e = S.matcher.exec(n);
              if (!e) break;
              const t = y(n.substring(A, e.index), e);
              A = e.index + t;
            }
            y(n.substring(A));
          }
          return (
            M.finalize(),
            (N = M.toHTML()),
            {
              language: e,
              value: N,
              relevance: j,
              illegal: !1,
              _emitter: M,
              _top: S,
            }
          );
        } catch (t) {
          if (t.message && t.message.includes("Illegal"))
            return {
              language: e,
              value: Y(n),
              illegal: !0,
              relevance: 0,
              _illegalBy: {
                message: t.message,
                index: A,
                context: n.slice(A - 100, A + 100),
                mode: t.mode,
                resultSoFar: N,
              },
              _emitter: M,
            };
          if (r)
            return {
              language: e,
              value: Y(n),
              illegal: !1,
              relevance: 0,
              errorRaised: t,
              _emitter: M,
              _top: S,
            };
          throw t;
        }
      }
      function x(e, t) {
        t = t || p.languages || Object.keys(i);
        const n = ((e) => {
            const t = {
              value: Y(e),
              illegal: !1,
              relevance: 0,
              _top: l,
              _emitter: new p.__emitter(p),
            };
            return t._emitter.addText(e), t;
          })(e),
          s = t
            .filter(O)
            .filter(N)
            .map((t) => E(t, e, !1));
        s.unshift(n);
        const o = s.sort((e, t) => {
            if (e.relevance !== t.relevance) return t.relevance - e.relevance;
            if (e.language && t.language) {
              if (O(e.language).supersetOf === t.language) return 1;
              if (O(t.language).supersetOf === e.language) return -1;
            }
            return 0;
          }),
          [r, a] = o,
          c = r;
        return (c.secondBest = a), c;
      }
      function w(e) {
        let t = null;
        const n = ((e) => {
          let t = e.className + " ";
          t += e.parentNode ? e.parentNode.className : "";
          const n = p.languageDetectRe.exec(t);
          if (n) {
            const t = O(n[1]);
            return (
              t ||
                (X(a.replace("{}", n[1])),
                X("Falling back to no-highlight mode for this block.", e)),
              t ? n[1] : "no-highlight"
            );
          }
          return t.split(/\s+/).find((e) => b(e) || O(e));
        })(e);
        if (b(n)) return;
        if (
          (S("before:highlightElement", { el: e, language: n }),
          e.children.length > 0 &&
            (p.ignoreUnescapedHTML ||
              (console.warn(
                "One of your code blocks includes unescaped HTML. This is a potentially serious security risk.",
              ),
              console.warn(
                "https://github.com/highlightjs/highlight.js/wiki/security",
              ),
              console.warn("The element with unescaped HTML:"),
              console.warn(e)),
            p.throwUnescapedHTML))
        )
          throw new J(
            "One of your code blocks includes unescaped HTML.",
            e.innerHTML,
          );
        t = e;
        const i = t.textContent,
          o = n ? m(i, { language: n, ignoreIllegals: !0 }) : x(i);
        (e.innerHTML = o.value),
          ((e, t, n) => {
            const i = (t && s[t]) || n;
            e.classList.add("hljs"), e.classList.add("language-" + i);
          })(e, n, o.language),
          (e.result = {
            language: o.language,
            re: o.relevance,
            relevance: o.relevance,
          }),
          o.secondBest &&
            (e.secondBest = {
              language: o.secondBest.language,
              relevance: o.secondBest.relevance,
            }),
          S("after:highlightElement", { el: e, result: o, text: i });
      }
      let y = !1;
      function _() {
        "loading" !== document.readyState
          ? document.querySelectorAll(p.cssSelector).forEach(w)
          : (y = !0);
      }
      function O(e) {
        return (e = (e || "").toLowerCase()), i[e] || i[s[e]];
      }
      function k(e, { languageName: t }) {
        "string" == typeof e && (e = [e]),
          e.forEach((e) => {
            s[e.toLowerCase()] = t;
          });
      }
      function N(e) {
        const t = O(e);
        return t && !t.disableAutodetect;
      }
      function S(e, t) {
        const n = e;
        o.forEach((e) => {
          e[n] && e[n](t);
        });
      }
      "undefined" != typeof window &&
        window.addEventListener &&
        window.addEventListener(
          "DOMContentLoaded",
          () => {
            y && _();
          },
          !1,
        ),
        Object.assign(n, {
          highlight: m,
          highlightAuto: x,
          highlightAll: _,
          highlightElement: w,
          highlightBlock: (e) => (
            G("10.7.0", "highlightBlock will be removed entirely in v12.0"),
            G("10.7.0", "Please use highlightElement now."),
            w(e)
          ),
          configure: (e) => {
            p = Q(p, e);
          },
          initHighlighting: () => {
            _(),
              G(
                "10.6.0",
                "initHighlighting() deprecated.  Use highlightAll() now.",
              );
          },
          initHighlightingOnLoad: () => {
            _(),
              G(
                "10.6.0",
                "initHighlightingOnLoad() deprecated.  Use highlightAll() now.",
              );
          },
          registerLanguage: (e, t) => {
            let s = null;
            try {
              s = t(n);
            } catch (t) {
              if (
                (W(
                  "Language definition for '{}' could not be registered.".replace(
                    "{}",
                    e,
                  ),
                ),
                !r)
              )
                throw t;
              W(t), (s = l);
            }
            s.name || (s.name = e),
              (i[e] = s),
              (s.rawDefinition = t.bind(null, n)),
              s.aliases &&
                k(s.aliases, {
                  languageName: e,
                });
          },
          unregisterLanguage: (e) => {
            delete i[e];
            for (const t of Object.keys(s)) s[t] === e && delete s[t];
          },
          listLanguages: () => Object.keys(i),
          getLanguage: O,
          registerAliases: k,
          autoDetection: N,
          inherit: Q,
          addPlugin: (e) => {
            ((e) => {
              e["before:highlightBlock"] &&
                !e["before:highlightElement"] &&
                (e["before:highlightElement"] = (t) => {
                  e["before:highlightBlock"](Object.assign({ block: t.el }, t));
                }),
                e["after:highlightBlock"] &&
                  !e["after:highlightElement"] &&
                  (e["after:highlightElement"] = (t) => {
                    e["after:highlightBlock"](
                      Object.assign({ block: t.el }, t),
                    );
                  });
            })(e),
              o.push(e);
          },
          removePlugin: (e) => {
            const t = o.indexOf(e);
            -1 !== t && o.splice(t, 1);
          },
        }),
        (n.debugMode = () => {
          r = !1;
        }),
        (n.safeMode = () => {
          r = !0;
        }),
        (n.versionString = "11.8.0"),
        (n.regex = {
          concat: h,
          lookahead: g,
          either: f,
          optional: d,
          anyNumberOfTimes: u,
        });
      for (const t in j) "object" == typeof j[t] && e(j[t]);
      return Object.assign(n, j), n;
    },
    ne = te({});
  return (ne.newInstance = () => te({})), ne;
})();
"object" == typeof exports &&
  "undefined" != typeof module &&
  (module.exports =
    hljs); /*! `coffeescript` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    const e = [
        "as",
        "in",
        "of",
        "if",
        "for",
        "while",
        "finally",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break",
        "catch",
        "instanceof",
        "with",
        "throw",
        "case",
        "default",
        "try",
        "switch",
        "continue",
        "typeof",
        "delete",
        "let",
        "yield",
        "const",
        "class",
        "debugger",
        "async",
        "await",
        "static",
        "import",
        "from",
        "export",
        "extends",
      ],
      n = ["true", "false", "null", "undefined", "NaN", "Infinity"],
      r = [].concat(
        [
          "setInterval",
          "setTimeout",
          "clearInterval",
          "clearTimeout",
          "require",
          "exports",
          "eval",
          "isFinite",
          "isNaN",
          "parseFloat",
          "parseInt",
          "decodeURI",
          "decodeURIComponent",
          "encodeURI",
          "encodeURIComponent",
          "escape",
          "unescape",
        ],
        [
          "Object",
          "Function",
          "Boolean",
          "Symbol",
          "Math",
          "Date",
          "Number",
          "BigInt",
          "String",
          "RegExp",
          "Array",
          "Float32Array",
          "Float64Array",
          "Int8Array",
          "Uint8Array",
          "Uint8ClampedArray",
          "Int16Array",
          "Int32Array",
          "Uint16Array",
          "Uint32Array",
          "BigInt64Array",
          "BigUint64Array",
          "Set",
          "Map",
          "WeakSet",
          "WeakMap",
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Atomics",
          "DataView",
          "JSON",
          "Promise",
          "Generator",
          "GeneratorFunction",
          "AsyncFunction",
          "Reflect",
          "Proxy",
          "Intl",
          "WebAssembly",
        ],
        [
          "Error",
          "EvalError",
          "InternalError",
          "RangeError",
          "ReferenceError",
          "SyntaxError",
          "TypeError",
          "URIError",
        ],
      );
    return (t) => {
      const a = {
        keyword: e
          .concat([
            "then",
            "unless",
            "until",
            "loop",
            "by",
            "when",
            "and",
            "or",
            "is",
            "isnt",
            "not",
          ])
          .filter(
            ((i = ["var", "const", "let", "function", "static"]),
            (e) => !i.includes(e)),
          ),
        literal: n.concat(["yes", "no", "on", "off"]),
        built_in: r.concat(["npm", "print"]),
      };
      var i;
      const s = "[A-Za-z$_][0-9A-Za-z$_]*",
        o = {
          className: "subst",
          begin: /#\{/,
          end: /\}/,
          keywords: a,
        },
        c = [
          t.BINARY_NUMBER_MODE,
          t.inherit(t.C_NUMBER_MODE, {
            starts: { end: "(\\s*/)?", relevance: 0 },
          }),
          {
            className: "string",
            variants: [
              { begin: /'''/, end: /'''/, contains: [t.BACKSLASH_ESCAPE] },
              { begin: /'/, end: /'/, contains: [t.BACKSLASH_ESCAPE] },
              { begin: /"""/, end: /"""/, contains: [t.BACKSLASH_ESCAPE, o] },
              { begin: /"/, end: /"/, contains: [t.BACKSLASH_ESCAPE, o] },
            ],
          },
          {
            className: "regexp",
            variants: [
              { begin: "///", end: "///", contains: [o, t.HASH_COMMENT_MODE] },
              { begin: "//[gim]{0,3}(?=\\W)", relevance: 0 },
              { begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/ },
            ],
          },
          { begin: "@" + s },
          {
            subLanguage: "javascript",
            excludeBegin: !0,
            excludeEnd: !0,
            variants: [
              {
                begin: "```",
                end: "```",
              },
              { begin: "`", end: "`" },
            ],
          },
        ];
      o.contains = c;
      const l = t.inherit(t.TITLE_MODE, { begin: s }),
        d = "(\\(.*\\)\\s*)?\\B[-=]>",
        g = {
          className: "params",
          begin: "\\([^\\(]",
          returnBegin: !0,
          contains: [
            {
              begin: /\(/,
              end: /\)/,
              keywords: a,
              contains: ["self"].concat(c),
            },
          ],
        },
        u = {
          variants: [
            {
              match: [/class\s+/, s, /\s+extends\s+/, s],
            },
            { match: [/class\s+/, s] },
          ],
          scope: {
            2: "title.class",
            4: "title.class.inherited",
          },
          keywords: a,
        };
      return {
        name: "CoffeeScript",
        aliases: ["coffee", "cson", "iced"],
        keywords: a,
        illegal: /\/\*/,
        contains: [
          ...c,
          t.COMMENT("###", "###"),
          t.HASH_COMMENT_MODE,
          {
            className: "function",
            begin: "^\\s*" + s + "\\s*=\\s*" + d,
            end: "[-=]>",
            returnBegin: !0,
            contains: [l, g],
          },
          {
            begin: /[:\(,=]\s*/,
            relevance: 0,
            contains: [
              {
                className: "function",
                begin: d,
                end: "[-=]>",
                returnBegin: !0,
                contains: [g],
              },
            ],
          },
          u,
          {
            begin: s + ":",
            end: ":",
            returnBegin: !0,
            returnEnd: !0,
            relevance: 0,
          },
        ],
      };
    };
  })();
  hljs.registerLanguage("coffeescript", e);
})(); /*! `css` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    const e = [
        "a",
        "abbr",
        "address",
        "article",
        "aside",
        "audio",
        "b",
        "blockquote",
        "body",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "dd",
        "del",
        "details",
        "dfn",
        "div",
        "dl",
        "dt",
        "em",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "main",
        "mark",
        "menu",
        "nav",
        "object",
        "ol",
        "p",
        "q",
        "quote",
        "samp",
        "section",
        "span",
        "strong",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "tr",
        "ul",
        "var",
        "video",
      ],
      i = [
        "any-hover",
        "any-pointer",
        "aspect-ratio",
        "color",
        "color-gamut",
        "color-index",
        "device-aspect-ratio",
        "device-height",
        "device-width",
        "display-mode",
        "forced-colors",
        "grid",
        "height",
        "hover",
        "inverted-colors",
        "monochrome",
        "orientation",
        "overflow-block",
        "overflow-inline",
        "pointer",
        "prefers-color-scheme",
        "prefers-contrast",
        "prefers-reduced-motion",
        "prefers-reduced-transparency",
        "resolution",
        "scan",
        "scripting",
        "update",
        "width",
        "min-width",
        "max-width",
        "min-height",
        "max-height",
      ],
      r = [
        "active",
        "any-link",
        "blank",
        "checked",
        "current",
        "default",
        "defined",
        "dir",
        "disabled",
        "drop",
        "empty",
        "enabled",
        "first",
        "first-child",
        "first-of-type",
        "fullscreen",
        "future",
        "focus",
        "focus-visible",
        "focus-within",
        "has",
        "host",
        "host-context",
        "hover",
        "indeterminate",
        "in-range",
        "invalid",
        "is",
        "lang",
        "last-child",
        "last-of-type",
        "left",
        "link",
        "local-link",
        "not",
        "nth-child",
        "nth-col",
        "nth-last-child",
        "nth-last-col",
        "nth-last-of-type",
        "nth-of-type",
        "only-child",
        "only-of-type",
        "optional",
        "out-of-range",
        "past",
        "placeholder-shown",
        "read-only",
        "read-write",
        "required",
        "right",
        "root",
        "scope",
        "target",
        "target-within",
        "user-invalid",
        "valid",
        "visited",
        "where",
      ],
      t = [
        "after",
        "backdrop",
        "before",
        "cue",
        "cue-region",
        "first-letter",
        "first-line",
        "grammar-error",
        "marker",
        "part",
        "placeholder",
        "selection",
        "slotted",
        "spelling-error",
      ],
      o = [
        "align-content",
        "align-items",
        "align-self",
        "all",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "backface-visibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-repeat",
        "background-size",
        "block-size",
        "border",
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "bottom",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "break-after",
        "break-before",
        "break-inside",
        "caption-side",
        "caret-color",
        "clear",
        "clip",
        "clip-path",
        "clip-rule",
        "color",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columns",
        "contain",
        "content",
        "content-visibility",
        "counter-increment",
        "counter-reset",
        "cue",
        "cue-after",
        "cue-before",
        "cursor",
        "direction",
        "display",
        "empty-cells",
        "filter",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "float",
        "flow",
        "font",
        "font-display",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-size",
        "font-size-adjust",
        "font-smoothing",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "gap",
        "glyph-orientation-vertical",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "hanging-punctuation",
        "height",
        "hyphens",
        "icon",
        "image-orientation",
        "image-rendering",
        "image-resolution",
        "ime-mode",
        "inline-size",
        "isolation",
        "justify-content",
        "left",
        "letter-spacing",
        "line-break",
        "line-height",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "margin",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-bottom",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "margin-left",
        "margin-right",
        "margin-top",
        "marks",
        "mask",
        "mask-border",
        "mask-border-mode",
        "mask-border-outset",
        "mask-border-repeat",
        "mask-border-slice",
        "mask-border-source",
        "mask-border-width",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "mix-blend-mode",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "none",
        "normal",
        "object-fit",
        "object-position",
        "opacity",
        "order",
        "orphans",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "overflow",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "padding",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-bottom",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "padding-left",
        "padding-right",
        "padding-top",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "pause",
        "pause-after",
        "pause-before",
        "perspective",
        "perspective-origin",
        "pointer-events",
        "position",
        "quotes",
        "resize",
        "rest",
        "rest-after",
        "rest-before",
        "right",
        "row-gap",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-stop",
        "scroll-snap-type",
        "scrollbar-color",
        "scrollbar-gutter",
        "scrollbar-width",
        "shape-image-threshold",
        "shape-margin",
        "shape-outside",
        "speak",
        "speak-as",
        "src",
        "tab-size",
        "table-layout",
        "text-align",
        "text-align-all",
        "text-align-last",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-style",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-transform",
        "text-underline-position",
        "top",
        "transform",
        "transform-box",
        "transform-origin",
        "transform-style",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "unicode-bidi",
        "vertical-align",
        "visibility",
        "voice-balance",
        "voice-duration",
        "voice-family",
        "voice-pitch",
        "voice-range",
        "voice-rate",
        "voice-stress",
        "voice-volume",
        "white-space",
        "widows",
        "width",
        "will-change",
        "word-break",
        "word-spacing",
        "word-wrap",
        "writing-mode",
        "z-index",
      ].reverse();
    return (n) => {
      const a = n.regex,
        l = ((e) => ({
          IMPORTANT: { scope: "meta", begin: "!important" },
          BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE,
          HEXCOLOR: {
            scope: "number",
            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/,
          },
          FUNCTION_DISPATCH: {
            className: "built_in",
            begin: /[\w-]+(?=\()/,
          },
          ATTRIBUTE_SELECTOR_MODE: {
            scope: "selector-attr",
            begin: /\[/,
            end: /\]/,
            illegal: "$",
            contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE],
          },
          CSS_NUMBER_MODE: {
            scope: "number",
            begin:
              e.NUMBER_RE +
              "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
            relevance: 0,
          },
          CSS_VARIABLE: {
            className: "attr",
            begin: /--[A-Za-z][A-Za-z0-9_-]*/,
          },
        }))(n),
        s = [n.APOS_STRING_MODE, n.QUOTE_STRING_MODE];
      return {
        name: "CSS",
        case_insensitive: !0,
        illegal: /[=|'\$]/,
        keywords: { keyframePosition: "from to" },
        classNameAliases: { keyframePosition: "selector-tag" },
        contains: [
          l.BLOCK_COMMENT,
          {
            begin: /-(webkit|moz|ms|o)-(?=[a-z])/,
          },
          l.CSS_NUMBER_MODE,
          {
            className: "selector-id",
            begin: /#[A-Za-z0-9_-]+/,
            relevance: 0,
          },
          {
            className: "selector-class",
            begin: "\\.[a-zA-Z-][a-zA-Z0-9_-]*",
            relevance: 0,
          },
          l.ATTRIBUTE_SELECTOR_MODE,
          {
            className: "selector-pseudo",
            variants: [
              {
                begin: ":(" + r.join("|") + ")",
              },
              { begin: ":(:)?(" + t.join("|") + ")" },
            ],
          },
          l.CSS_VARIABLE,
          {
            className: "attribute",
            begin: "\\b(" + o.join("|") + ")\\b",
          },
          {
            begin: /:/,
            end: /[;}{]/,
            contains: [
              l.BLOCK_COMMENT,
              l.HEXCOLOR,
              l.IMPORTANT,
              l.CSS_NUMBER_MODE,
              ...s,
              {
                begin: /(url|data-uri)\(/,
                end: /\)/,
                relevance: 0,
                keywords: { built_in: "url data-uri" },
                contains: [
                  ...s,
                  {
                    className: "string",
                    begin: /[^)]/,
                    endsWithParent: !0,
                    excludeEnd: !0,
                  },
                ],
              },
              l.FUNCTION_DISPATCH,
            ],
          },
          {
            begin: a.lookahead(/@/),
            end: "[{;]",
            relevance: 0,
            illegal: /:/,
            contains: [
              { className: "keyword", begin: /@-?\w[\w]*(-\w+)*/ },
              {
                begin: /\s/,
                endsWithParent: !0,
                excludeEnd: !0,
                relevance: 0,
                keywords: {
                  $pattern: /[a-z-]+/,
                  keyword: "and or not only",
                  attribute: i.join(" "),
                },
                contains: [
                  {
                    begin: /[a-z-]+(?=:)/,
                    className: "attribute",
                  },
                  ...s,
                  l.CSS_NUMBER_MODE,
                ],
              },
            ],
          },
          {
            className: "selector-tag",
            begin: "\\b(" + e.join("|") + ")\\b",
          },
        ],
      };
    };
  })();
  hljs.registerLanguage("css", e);
})(); /*! `elixir` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = e.regex,
        a = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?",
        i = {
          $pattern: a,
          keyword: [
            "after",
            "alias",
            "and",
            "case",
            "catch",
            "cond",
            "defstruct",
            "defguard",
            "do",
            "else",
            "end",
            "fn",
            "for",
            "if",
            "import",
            "in",
            "not",
            "or",
            "quote",
            "raise",
            "receive",
            "require",
            "reraise",
            "rescue",
            "try",
            "unless",
            "unquote",
            "unquote_splicing",
            "use",
            "when",
            "with|0",
          ],
          literal: ["false", "nil", "true"],
        },
        s = { className: "subst", begin: /#\{/, end: /\}/, keywords: i },
        c = { match: /\\[\s\S]/, scope: "char.escape", relevance: 0 },
        r = "[/|([{<\"']",
        t = [
          { begin: /"/, end: /"/ },
          { begin: /'/, end: /'/ },
          { begin: /\//, end: /\// },
          { begin: /\|/, end: /\|/ },
          { begin: /\(/, end: /\)/ },
          { begin: /\[/, end: /\]/ },
          {
            begin: /\{/,
            end: /\}/,
          },
          { begin: /</, end: />/ },
        ],
        d = (e) => ({
          scope: "char.escape",
          begin: n.concat(/\\/, e),
          relevance: 0,
        }),
        o = {
          className: "string",
          begin: "~[a-z](?=" + r + ")",
          contains: t.map((n) => e.inherit(n, { contains: [d(n.end), c, s] })),
        },
        b = {
          className: "string",
          begin: "~[A-Z](?=" + r + ")",
          contains: t.map((n) => e.inherit(n, { contains: [d(n.end)] })),
        },
        g = {
          className: "regex",
          variants: [
            {
              begin: "~r(?=" + r + ")",
              contains: t.map((a) =>
                e.inherit(a, {
                  end: n.concat(a.end, /[uismxfU]{0,7}/),
                  contains: [d(a.end), c, s],
                }),
              ),
            },
            {
              begin: "~R(?=" + r + ")",
              contains: t.map((a) =>
                e.inherit(a, {
                  end: n.concat(a.end, /[uismxfU]{0,7}/),
                  contains: [d(a.end)],
                }),
              ),
            },
          ],
        },
        l = {
          className: "string",
          contains: [e.BACKSLASH_ESCAPE, s],
          variants: [
            { begin: /"""/, end: /"""/ },
            { begin: /'''/, end: /'''/ },
            { begin: /~S"""/, end: /"""/, contains: [] },
            {
              begin: /~S"/,
              end: /"/,
              contains: [],
            },
            { begin: /~S'''/, end: /'''/, contains: [] },
            {
              begin: /~S'/,
              end: /'/,
              contains: [],
            },
            { begin: /'/, end: /'/ },
            { begin: /"/, end: /"/ },
          ],
        },
        m = {
          className: "function",
          beginKeywords: "def defp defmacro defmacrop",
          end: /\B\b/,
          contains: [e.inherit(e.TITLE_MODE, { begin: a, endsParent: !0 })],
        },
        u = e.inherit(m, {
          className: "class",
          beginKeywords: "defimpl defmodule defprotocol defrecord",
          end: /\bdo\b|$|;/,
        }),
        f = [
          l,
          g,
          b,
          o,
          e.HASH_COMMENT_MODE,
          u,
          m,
          { begin: "::" },
          {
            className: "symbol",
            begin: ":(?![\\s:])",
            contains: [
              l,
              {
                begin:
                  "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",
              },
            ],
            relevance: 0,
          },
          { className: "symbol", begin: a + ":(?!:)", relevance: 0 },
          {
            className: "title.class",
            begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
            relevance: 0,
          },
          {
            className: "number",
            begin:
              "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
            relevance: 0,
          },
          { className: "variable", begin: "(\\$\\W)|((\\$|@@?)(\\w+))" },
        ];
      return (
        (s.contains = f),
        { name: "Elixir", aliases: ["ex", "exs"], keywords: i, contains: f }
      );
    };
  })();
  hljs.registerLanguage("elixir", e);
})(); /*! `elm` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = {
          variants: [
            e.COMMENT("--", "$"),
            e.COMMENT(/\{-/, /-\}/, { contains: ["self"] }),
          ],
        },
        i = {
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0,
        },
        s = {
          begin: "\\(",
          end: "\\)",
          illegal: '"',
          contains: [
            {
              className: "type",
              begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?",
            },
            n,
          ],
        };
      return {
        name: "Elm",
        keywords: [
          "let",
          "in",
          "if",
          "then",
          "else",
          "case",
          "of",
          "where",
          "module",
          "import",
          "exposing",
          "type",
          "alias",
          "as",
          "infix",
          "infixl",
          "infixr",
          "port",
          "effect",
          "command",
          "subscription",
        ],
        contains: [
          {
            beginKeywords: "port effect module",
            end: "exposing",
            keywords: "port effect module where command subscription exposing",
            contains: [s, n],
            illegal: "\\W\\.|;",
          },
          {
            begin: "import",
            end: "$",
            keywords: "import as exposing",
            contains: [s, n],
            illegal: "\\W\\.|;",
          },
          {
            begin: "type",
            end: "$",
            keywords: "type alias",
            contains: [
              i,
              s,
              { begin: /\{/, end: /\}/, contains: s.contains },
              n,
            ],
          },
          {
            beginKeywords: "infix infixl infixr",
            end: "$",
            contains: [e.C_NUMBER_MODE, n],
          },
          { begin: "port", end: "$", keywords: "port", contains: [n] },
          { className: "string", begin: "'\\\\?.", end: "'", illegal: "." },
          e.QUOTE_STRING_MODE,
          e.C_NUMBER_MODE,
          i,
          e.inherit(e.TITLE_MODE, {
            begin: "^[_a-z][\\w']*",
          }),
          n,
          { begin: "->|<-" },
        ],
        illegal: /;/,
      };
    };
  })();
  hljs.registerLanguage("elm", e);
})(); /*! `erlang` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = "[a-z'][a-zA-Z0-9_']*",
        r = "(" + n + ":" + n + "|" + n + ")",
        a = {
          keyword:
            "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",
          literal: "false true",
        },
        i = e.COMMENT("%", "$"),
        s = {
          className: "number",
          begin:
            "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
          relevance: 0,
        },
        c = { begin: "fun\\s+" + n + "/\\d+" },
        t = {
          begin: r + "\\(",
          end: "\\)",
          returnBegin: !0,
          relevance: 0,
          contains: [
            { begin: r, relevance: 0 },
            {
              begin: "\\(",
              end: "\\)",
              endsWithParent: !0,
              returnEnd: !0,
              relevance: 0,
            },
          ],
        },
        d = { begin: /\{/, end: /\}/, relevance: 0 },
        o = { begin: "\\b_([A-Z][A-Za-z0-9_]*)?", relevance: 0 },
        l = {
          begin: "[A-Z][a-zA-Z0-9_]*",
          relevance: 0,
        },
        b = {
          begin: "#" + e.UNDERSCORE_IDENT_RE,
          relevance: 0,
          returnBegin: !0,
          contains: [
            { begin: "#" + e.UNDERSCORE_IDENT_RE, relevance: 0 },
            { begin: /\{/, end: /\}/, relevance: 0 },
          ],
        },
        g = {
          beginKeywords: "fun receive if try case",
          end: "end",
          keywords: a,
        };
      g.contains = [
        i,
        c,
        e.inherit(e.APOS_STRING_MODE, { className: "" }),
        g,
        t,
        e.QUOTE_STRING_MODE,
        s,
        d,
        o,
        l,
        b,
      ];
      const E = [i, c, g, t, e.QUOTE_STRING_MODE, s, d, o, l, b];
      (t.contains[1].contains = E),
        (d.contains = E),
        (b.contains[1].contains = E);
      const u = {
        className: "params",
        begin: "\\(",
        end: "\\)",
        contains: E,
      };
      return {
        name: "Erlang",
        aliases: ["erl"],
        keywords: a,
        illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
        contains: [
          {
            className: "function",
            begin: "^" + n + "\\s*\\(",
            end: "->",
            returnBegin: !0,
            illegal: "\\(|#|//|/\\*|\\\\|:|;",
            contains: [u, e.inherit(e.TITLE_MODE, { begin: n })],
            starts: { end: ";|\\.", keywords: a, contains: E },
          },
          i,
          {
            begin: "^-",
            end: "\\.",
            relevance: 0,
            excludeEnd: !0,
            returnBegin: !0,
            keywords: {
              $pattern: "-" + e.IDENT_RE,
              keyword: [
                "-module",
                "-record",
                "-undef",
                "-export",
                "-ifdef",
                "-ifndef",
                "-author",
                "-copyright",
                "-doc",
                "-vsn",
                "-import",
                "-include",
                "-include_lib",
                "-compile",
                "-define",
                "-else",
                "-endif",
                "-file",
                "-behaviour",
                "-behavior",
                "-spec",
              ]
                .map((e) => e + "|1.5")
                .join(" "),
            },
            contains: [u],
          },
          s,
          e.QUOTE_STRING_MODE,
          b,
          o,
          l,
          d,
          { begin: /\.$/ },
        ],
      };
    };
  })();
  hljs.registerLanguage("erlang", e);
})(); /*! `go` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = {
        keyword: [
          "break",
          "case",
          "chan",
          "const",
          "continue",
          "default",
          "defer",
          "else",
          "fallthrough",
          "for",
          "func",
          "go",
          "goto",
          "if",
          "import",
          "interface",
          "map",
          "package",
          "range",
          "return",
          "select",
          "struct",
          "switch",
          "type",
          "var",
        ],
        type: [
          "bool",
          "byte",
          "complex64",
          "complex128",
          "error",
          "float32",
          "float64",
          "int8",
          "int16",
          "int32",
          "int64",
          "string",
          "uint8",
          "uint16",
          "uint32",
          "uint64",
          "int",
          "uint",
          "uintptr",
          "rune",
        ],
        literal: ["true", "false", "iota", "nil"],
        built_in: [
          "append",
          "cap",
          "close",
          "complex",
          "copy",
          "imag",
          "len",
          "make",
          "new",
          "panic",
          "print",
          "println",
          "real",
          "recover",
          "delete",
        ],
      };
      return {
        name: "Go",
        aliases: ["golang"],
        keywords: n,
        illegal: "</",
        contains: [
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
          {
            className: "string",
            variants: [
              e.QUOTE_STRING_MODE,
              e.APOS_STRING_MODE,
              { begin: "`", end: "`" },
            ],
          },
          {
            className: "number",
            variants: [
              { begin: e.C_NUMBER_RE + "[i]", relevance: 1 },
              e.C_NUMBER_MODE,
            ],
          },
          { begin: /:=/ },
          {
            className: "function",
            beginKeywords: "func",
            end: "\\s*(\\{|$)",
            excludeEnd: !0,
            contains: [
              e.TITLE_MODE,
              {
                className: "params",
                begin: /\(/,
                end: /\)/,
                endsParent: !0,
                keywords: n,
                illegal: /["']/,
              },
            ],
          },
        ],
      };
    };
  })();
  hljs.registerLanguage("go", e);
})(); /*! `haskell` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = {
          variants: [
            e.COMMENT("--", "$"),
            e.COMMENT(/\{-/, /-\}/, { contains: ["self"] }),
          ],
        },
        a = {
          className: "meta",
          begin: /\{-#/,
          end: /#-\}/,
        },
        s = { className: "meta", begin: "^#", end: "$" },
        i = { className: "type", begin: "\\b[A-Z][\\w']*", relevance: 0 },
        l = {
          begin: "\\(",
          end: "\\)",
          illegal: '"',
          contains: [
            a,
            s,
            {
              className: "type",
              begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?",
            },
            e.inherit(e.TITLE_MODE, {
              begin: "[_a-z][\\w']*",
            }),
            n,
          ],
        },
        t = "([0-9]_*)+",
        c = "([0-9a-fA-F]_*)+",
        r = {
          className: "number",
          relevance: 0,
          variants: [
            {
              match: `\\b(${t})(\\.(${t}))?([eE][+-]?(${t}))?\\b`,
            },
            {
              match: `\\b0[xX]_*(${c})(\\.(${c}))?([pP][+-]?(${t}))?\\b`,
            },
            {
              match: "\\b0[oO](([0-7]_*)+)\\b",
            },
            { match: "\\b0[bB](([01]_*)+)\\b" },
          ],
        };
      return {
        name: "Haskell",
        aliases: ["hs"],
        keywords:
          "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
        contains: [
          {
            beginKeywords: "module",
            end: "where",
            keywords: "module where",
            contains: [l, n],
            illegal: "\\W\\.|;",
          },
          {
            begin: "\\bimport\\b",
            end: "$",
            keywords: "import qualified as hiding",
            contains: [l, n],
            illegal: "\\W\\.|;",
          },
          {
            className: "class",
            begin: "^(\\s*)?(class|instance)\\b",
            end: "where",
            keywords: "class family instance where",
            contains: [i, l, n],
          },
          {
            className: "class",
            begin: "\\b(data|(new)?type)\\b",
            end: "$",
            keywords: "data family type newtype deriving",
            contains: [
              a,
              i,
              l,
              { begin: /\{/, end: /\}/, contains: l.contains },
              n,
            ],
          },
          { beginKeywords: "default", end: "$", contains: [i, l, n] },
          {
            beginKeywords: "infix infixl infixr",
            end: "$",
            contains: [e.C_NUMBER_MODE, n],
          },
          {
            begin: "\\bforeign\\b",
            end: "$",
            keywords:
              "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
            contains: [i, e.QUOTE_STRING_MODE, n],
          },
          {
            className: "meta",
            begin: "#!\\/usr\\/bin\\/env runhaskell",
            end: "$",
          },
          a,
          s,
          {
            scope: "string",
            begin: /'(?=\\?.')/,
            end: /'/,
            contains: [{ scope: "char.escape", match: /\\./ }],
          },
          e.QUOTE_STRING_MODE,
          r,
          i,
          e.inherit(e.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
          n,
          {
            begin: "->|<-",
          },
        ],
      };
    };
  })();
  hljs.registerLanguage("haskell", e);
})(); /*! `javascript` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    const e = "[A-Za-z$_][0-9A-Za-z$_]*",
      n = [
        "as",
        "in",
        "of",
        "if",
        "for",
        "while",
        "finally",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break",
        "catch",
        "instanceof",
        "with",
        "throw",
        "case",
        "default",
        "try",
        "switch",
        "continue",
        "typeof",
        "delete",
        "let",
        "yield",
        "const",
        "class",
        "debugger",
        "async",
        "await",
        "static",
        "import",
        "from",
        "export",
        "extends",
      ],
      a = ["true", "false", "null", "undefined", "NaN", "Infinity"],
      t = [
        "Object",
        "Function",
        "Boolean",
        "Symbol",
        "Math",
        "Date",
        "Number",
        "BigInt",
        "String",
        "RegExp",
        "Array",
        "Float32Array",
        "Float64Array",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Int32Array",
        "Uint16Array",
        "Uint32Array",
        "BigInt64Array",
        "BigUint64Array",
        "Set",
        "Map",
        "WeakSet",
        "WeakMap",
        "ArrayBuffer",
        "SharedArrayBuffer",
        "Atomics",
        "DataView",
        "JSON",
        "Promise",
        "Generator",
        "GeneratorFunction",
        "AsyncFunction",
        "Reflect",
        "Proxy",
        "Intl",
        "WebAssembly",
      ],
      s = [
        "Error",
        "EvalError",
        "InternalError",
        "RangeError",
        "ReferenceError",
        "SyntaxError",
        "TypeError",
        "URIError",
      ],
      r = [
        "setInterval",
        "setTimeout",
        "clearInterval",
        "clearTimeout",
        "require",
        "exports",
        "eval",
        "isFinite",
        "isNaN",
        "parseFloat",
        "parseInt",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "unescape",
      ],
      c = [
        "arguments",
        "this",
        "super",
        "console",
        "window",
        "document",
        "localStorage",
        "sessionStorage",
        "module",
        "global",
      ],
      i = [].concat(r, t, s);
    return (o) => {
      const l = o.regex,
        b = e,
        d = {
          begin: /<[A-Za-z0-9\\._:-]+/,
          end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
          isTrulyOpeningTag: (e, n) => {
            const a = e[0].length + e.index,
              t = e.input[a];
            if ("<" === t || "," === t) return void n.ignoreMatch();
            let s;
            ">" === t &&
              (((e, { after: n }) => {
                const a = "</" + e[0].slice(1);
                return -1 !== e.input.indexOf(a, n);
              })(e, { after: a }) ||
                n.ignoreMatch());
            const r = e.input.substring(a);
            ((s = r.match(/^\s*=/)) ||
              ((s = r.match(/^\s+extends\s+/)) && 0 === s.index)) &&
              n.ignoreMatch();
          },
        },
        g = {
          $pattern: e,
          keyword: n,
          literal: a,
          built_in: i,
          "variable.language": c,
        },
        u = "[0-9](_?[0-9])*",
        m = `\\.(${u})`,
        E = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",
        A = {
          className: "number",
          variants: [
            {
              begin: `(\\b(${E})((${m})|\\.)?|(${m}))[eE][+-]?(${u})\\b`,
            },
            {
              begin: `\\b(${E})\\b((${m})\\b|\\.)?|(${m})\\b`,
            },
            {
              begin: "\\b(0|[1-9](_?[0-9])*)n\\b",
            },
            {
              begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b",
            },
            {
              begin: "\\b0[bB][0-1](_?[0-1])*n?\\b",
            },
            { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
            {
              begin: "\\b0[0-7]+n?\\b",
            },
          ],
          relevance: 0,
        },
        y = {
          className: "subst",
          begin: "\\$\\{",
          end: "\\}",
          keywords: g,
          contains: [],
        },
        h = {
          begin: "html`",
          end: "",
          starts: {
            end: "`",
            returnEnd: !1,
            contains: [o.BACKSLASH_ESCAPE, y],
            subLanguage: "xml",
          },
        },
        N = {
          begin: "css`",
          end: "",
          starts: {
            end: "`",
            returnEnd: !1,
            contains: [o.BACKSLASH_ESCAPE, y],
            subLanguage: "css",
          },
        },
        _ = {
          begin: "gql`",
          end: "",
          starts: {
            end: "`",
            returnEnd: !1,
            contains: [o.BACKSLASH_ESCAPE, y],
            subLanguage: "graphql",
          },
        },
        f = {
          className: "string",
          begin: "`",
          end: "`",
          contains: [o.BACKSLASH_ESCAPE, y],
        },
        v = {
          className: "comment",
          variants: [
            o.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
              relevance: 0,
              contains: [
                {
                  begin: "(?=@[A-Za-z]+)",
                  relevance: 0,
                  contains: [
                    { className: "doctag", begin: "@[A-Za-z]+" },
                    {
                      className: "type",
                      begin: "\\{",
                      end: "\\}",
                      excludeEnd: !0,
                      excludeBegin: !0,
                      relevance: 0,
                    },
                    {
                      className: "variable",
                      begin: b + "(?=\\s*(-)|$)",
                      endsParent: !0,
                      relevance: 0,
                    },
                    { begin: /(?=[^\n])\s/, relevance: 0 },
                  ],
                },
              ],
            }),
            o.C_BLOCK_COMMENT_MODE,
            o.C_LINE_COMMENT_MODE,
          ],
        },
        p = [
          o.APOS_STRING_MODE,
          o.QUOTE_STRING_MODE,
          h,
          N,
          _,
          f,
          { match: /\$\d+/ },
          A,
        ];
      y.contains = p.concat({
        begin: /\{/,
        end: /\}/,
        keywords: g,
        contains: ["self"].concat(p),
      });
      const S = [].concat(v, y.contains),
        w = S.concat([
          { begin: /\(/, end: /\)/, keywords: g, contains: ["self"].concat(S) },
        ]),
        R = {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: g,
          contains: w,
        },
        O = {
          variants: [
            {
              match: [
                /class/,
                /\s+/,
                b,
                /\s+/,
                /extends/,
                /\s+/,
                l.concat(b, "(", l.concat(/\./, b), ")*"),
              ],
              scope: {
                1: "keyword",
                3: "title.class",
                5: "keyword",
                7: "title.class.inherited",
              },
            },
            {
              match: [/class/, /\s+/, b],
              scope: { 1: "keyword", 3: "title.class" },
            },
          ],
        },
        k = {
          relevance: 0,
          match: l.either(
            /\bJSON/,
            /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
            /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
            /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
          ),
          className: "title.class",
          keywords: { _: [...t, ...s] },
        },
        I = {
          variants: [
            {
              match: [/function/, /\s+/, b, /(?=\s*\()/],
            },
            { match: [/function/, /\s*(?=\()/] },
          ],
          className: { 1: "keyword", 3: "title.function" },
          label: "func.def",
          contains: [R],
          illegal: /%/,
        },
        x = {
          match: l.concat(
            /\b/,
            ((T = [...r, "super", "import"]),
            l.concat("(?!", T.join("|"), ")")),
            b,
            l.lookahead(/\(/),
          ),
          className: "title.function",
          relevance: 0,
        };
      var T;
      const C = {
          begin: l.concat(/\./, l.lookahead(l.concat(b, /(?![0-9A-Za-z$_(])/))),
          end: b,
          excludeBegin: !0,
          keywords: "prototype",
          className: "property",
          relevance: 0,
        },
        M = {
          match: [/get|set/, /\s+/, b, /(?=\()/],
          className: { 1: "keyword", 3: "title.function" },
          contains: [{ begin: /\(\)/ }, R],
        },
        B =
          "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" +
          o.UNDERSCORE_IDENT_RE +
          ")\\s*=>",
        $ = {
          match: [
            /const|var|let/,
            /\s+/,
            b,
            /\s*/,
            /=\s*/,
            /(async\s*)?/,
            l.lookahead(B),
          ],
          keywords: "async",
          className: { 1: "keyword", 3: "title.function" },
          contains: [R],
        };
      return {
        name: "JavaScript",
        aliases: ["js", "jsx", "mjs", "cjs"],
        keywords: g,
        exports: {
          PARAMS_CONTAINS: w,
          CLASS_REFERENCE: k,
        },
        illegal: /#(?![$_A-z])/,
        contains: [
          o.SHEBANG({ label: "shebang", binary: "node", relevance: 5 }),
          {
            label: "use_strict",
            className: "meta",
            relevance: 10,
            begin: /^\s*['"]use (strict|asm)['"]/,
          },
          o.APOS_STRING_MODE,
          o.QUOTE_STRING_MODE,
          h,
          N,
          _,
          f,
          v,
          { match: /\$\d+/ },
          A,
          k,
          {
            className: "attr",
            begin: b + l.lookahead(":"),
            relevance: 0,
          },
          $,
          {
            begin: "(" + o.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
            keywords: "return throw case",
            relevance: 0,
            contains: [
              v,
              o.REGEXP_MODE,
              {
                className: "function",
                begin: B,
                returnBegin: !0,
                end: "\\s*=>",
                contains: [
                  {
                    className: "params",
                    variants: [
                      { begin: o.UNDERSCORE_IDENT_RE, relevance: 0 },
                      {
                        className: null,
                        begin: /\(\s*\)/,
                        skip: !0,
                      },
                      {
                        begin: /\(/,
                        end: /\)/,
                        excludeBegin: !0,
                        excludeEnd: !0,
                        keywords: g,
                        contains: w,
                      },
                    ],
                  },
                ],
              },
              { begin: /,/, relevance: 0 },
              { match: /\s+/, relevance: 0 },
              {
                variants: [
                  { begin: "<>", end: "</>" },
                  {
                    match: /<[A-Za-z0-9\\._:-]+\s*\/>/,
                  },
                  {
                    begin: d.begin,
                    "on:begin": d.isTrulyOpeningTag,
                    end: d.end,
                  },
                ],
                subLanguage: "xml",
                contains: [
                  {
                    begin: d.begin,
                    end: d.end,
                    skip: !0,
                    contains: ["self"],
                  },
                ],
              },
            ],
          },
          I,
          {
            beginKeywords: "while if switch catch for",
          },
          {
            begin:
              "\\b(?!function)" +
              o.UNDERSCORE_IDENT_RE +
              "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
            returnBegin: !0,
            label: "func.def",
            contains: [
              R,
              o.inherit(o.TITLE_MODE, {
                begin: b,
                className: "title.function",
              }),
            ],
          },
          { match: /\.\.\./, relevance: 0 },
          C,
          { match: "\\$" + b, relevance: 0 },
          {
            match: [/\bconstructor(?=\s*\()/],
            className: { 1: "title.function" },
            contains: [R],
          },
          x,
          {
            relevance: 0,
            match: /\b[A-Z][A-Z_0-9]+\b/,
            className: "variable.constant",
          },
          O,
          M,
          { match: /\$[(.]/ },
        ],
      };
    };
  })();
  hljs.registerLanguage("javascript", e);
})(); /*! `json` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const a = ["true", "false", "null"],
        n = {
          scope: "literal",
          beginKeywords: a.join(" "),
        };
      return {
        name: "JSON",
        keywords: {
          literal: a,
        },
        contains: [
          {
            className: "attr",
            begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
            relevance: 1.01,
          },
          { match: /[{}[\],:]/, className: "punctuation", relevance: 0 },
          e.QUOTE_STRING_MODE,
          n,
          e.C_NUMBER_MODE,
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
        ],
        illegal: "\\S",
      };
    };
  })();
  hljs.registerLanguage("json", e);
})(); /*! `less` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    const e = [
        "a",
        "abbr",
        "address",
        "article",
        "aside",
        "audio",
        "b",
        "blockquote",
        "body",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "dd",
        "del",
        "details",
        "dfn",
        "div",
        "dl",
        "dt",
        "em",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "main",
        "mark",
        "menu",
        "nav",
        "object",
        "ol",
        "p",
        "q",
        "quote",
        "samp",
        "section",
        "span",
        "strong",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "tr",
        "ul",
        "var",
        "video",
      ],
      t = [
        "any-hover",
        "any-pointer",
        "aspect-ratio",
        "color",
        "color-gamut",
        "color-index",
        "device-aspect-ratio",
        "device-height",
        "device-width",
        "display-mode",
        "forced-colors",
        "grid",
        "height",
        "hover",
        "inverted-colors",
        "monochrome",
        "orientation",
        "overflow-block",
        "overflow-inline",
        "pointer",
        "prefers-color-scheme",
        "prefers-contrast",
        "prefers-reduced-motion",
        "prefers-reduced-transparency",
        "resolution",
        "scan",
        "scripting",
        "update",
        "width",
        "min-width",
        "max-width",
        "min-height",
        "max-height",
      ],
      r = [
        "active",
        "any-link",
        "blank",
        "checked",
        "current",
        "default",
        "defined",
        "dir",
        "disabled",
        "drop",
        "empty",
        "enabled",
        "first",
        "first-child",
        "first-of-type",
        "fullscreen",
        "future",
        "focus",
        "focus-visible",
        "focus-within",
        "has",
        "host",
        "host-context",
        "hover",
        "indeterminate",
        "in-range",
        "invalid",
        "is",
        "lang",
        "last-child",
        "last-of-type",
        "left",
        "link",
        "local-link",
        "not",
        "nth-child",
        "nth-col",
        "nth-last-child",
        "nth-last-col",
        "nth-last-of-type",
        "nth-of-type",
        "only-child",
        "only-of-type",
        "optional",
        "out-of-range",
        "past",
        "placeholder-shown",
        "read-only",
        "read-write",
        "required",
        "right",
        "root",
        "scope",
        "target",
        "target-within",
        "user-invalid",
        "valid",
        "visited",
        "where",
      ],
      i = [
        "after",
        "backdrop",
        "before",
        "cue",
        "cue-region",
        "first-letter",
        "first-line",
        "grammar-error",
        "marker",
        "part",
        "placeholder",
        "selection",
        "slotted",
        "spelling-error",
      ],
      o = [
        "align-content",
        "align-items",
        "align-self",
        "all",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "backface-visibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-repeat",
        "background-size",
        "block-size",
        "border",
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "bottom",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "break-after",
        "break-before",
        "break-inside",
        "caption-side",
        "caret-color",
        "clear",
        "clip",
        "clip-path",
        "clip-rule",
        "color",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columns",
        "contain",
        "content",
        "content-visibility",
        "counter-increment",
        "counter-reset",
        "cue",
        "cue-after",
        "cue-before",
        "cursor",
        "direction",
        "display",
        "empty-cells",
        "filter",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "float",
        "flow",
        "font",
        "font-display",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-size",
        "font-size-adjust",
        "font-smoothing",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "gap",
        "glyph-orientation-vertical",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "hanging-punctuation",
        "height",
        "hyphens",
        "icon",
        "image-orientation",
        "image-rendering",
        "image-resolution",
        "ime-mode",
        "inline-size",
        "isolation",
        "justify-content",
        "left",
        "letter-spacing",
        "line-break",
        "line-height",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "margin",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-bottom",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "margin-left",
        "margin-right",
        "margin-top",
        "marks",
        "mask",
        "mask-border",
        "mask-border-mode",
        "mask-border-outset",
        "mask-border-repeat",
        "mask-border-slice",
        "mask-border-source",
        "mask-border-width",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "mix-blend-mode",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "none",
        "normal",
        "object-fit",
        "object-position",
        "opacity",
        "order",
        "orphans",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "overflow",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "padding",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-bottom",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "padding-left",
        "padding-right",
        "padding-top",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "pause",
        "pause-after",
        "pause-before",
        "perspective",
        "perspective-origin",
        "pointer-events",
        "position",
        "quotes",
        "resize",
        "rest",
        "rest-after",
        "rest-before",
        "right",
        "row-gap",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-stop",
        "scroll-snap-type",
        "scrollbar-color",
        "scrollbar-gutter",
        "scrollbar-width",
        "shape-image-threshold",
        "shape-margin",
        "shape-outside",
        "speak",
        "speak-as",
        "src",
        "tab-size",
        "table-layout",
        "text-align",
        "text-align-all",
        "text-align-last",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-style",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-transform",
        "text-underline-position",
        "top",
        "transform",
        "transform-box",
        "transform-origin",
        "transform-style",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "unicode-bidi",
        "vertical-align",
        "visibility",
        "voice-balance",
        "voice-duration",
        "voice-family",
        "voice-pitch",
        "voice-range",
        "voice-rate",
        "voice-stress",
        "voice-volume",
        "white-space",
        "widows",
        "width",
        "will-change",
        "word-break",
        "word-spacing",
        "word-wrap",
        "writing-mode",
        "z-index",
      ].reverse(),
      n = r.concat(i);
    return (a) => {
      const l = ((e) => ({
          IMPORTANT: { scope: "meta", begin: "!important" },
          BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE,
          HEXCOLOR: {
            scope: "number",
            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/,
          },
          FUNCTION_DISPATCH: {
            className: "built_in",
            begin: /[\w-]+(?=\()/,
          },
          ATTRIBUTE_SELECTOR_MODE: {
            scope: "selector-attr",
            begin: /\[/,
            end: /\]/,
            illegal: "$",
            contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE],
          },
          CSS_NUMBER_MODE: {
            scope: "number",
            begin:
              e.NUMBER_RE +
              "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
            relevance: 0,
          },
          CSS_VARIABLE: {
            className: "attr",
            begin: /--[A-Za-z][A-Za-z0-9_-]*/,
          },
        }))(a),
        s = n,
        d = "[\\w-]+",
        c = "(" + d + "|@\\{" + d + "\\})",
        g = [],
        b = [],
        m = (e) => ({
          className: "string",
          begin: "~?" + e + ".*?" + e,
        }),
        p = (e, t, r) => ({ className: e, begin: t, relevance: r }),
        u = {
          $pattern: /[a-z-]+/,
          keyword: "and or not only",
          attribute: t.join(" "),
        },
        h = {
          begin: "\\(",
          end: "\\)",
          contains: b,
          keywords: u,
          relevance: 0,
        };
      b.push(
        a.C_LINE_COMMENT_MODE,
        a.C_BLOCK_COMMENT_MODE,
        m("'"),
        m('"'),
        l.CSS_NUMBER_MODE,
        {
          begin: "(url|data-uri)\\(",
          starts: { className: "string", end: "[\\)\\n]", excludeEnd: !0 },
        },
        l.HEXCOLOR,
        h,
        p("variable", "@@?" + d, 10),
        p("variable", "@\\{" + d + "\\}"),
        p("built_in", "~?`[^`]*?`"),
        {
          className: "attribute",
          begin: d + "\\s*:",
          end: ":",
          returnBegin: !0,
          excludeEnd: !0,
        },
        l.IMPORTANT,
        { beginKeywords: "and not" },
        l.FUNCTION_DISPATCH,
      );
      const f = b.concat({
          begin: /\{/,
          end: /\}/,
          contains: g,
        }),
        k = {
          beginKeywords: "when",
          endsWithParent: !0,
          contains: [{ beginKeywords: "and not" }].concat(b),
        },
        v = {
          begin: c + "\\s*:",
          returnBegin: !0,
          end: /[;}]/,
          relevance: 0,
          contains: [
            { begin: /-(webkit|moz|ms|o)-/ },
            l.CSS_VARIABLE,
            {
              className: "attribute",
              begin: "\\b(" + o.join("|") + ")\\b",
              end: /(?=:)/,
              starts: {
                endsWithParent: !0,
                illegal: "[<=$]",
                relevance: 0,
                contains: b,
              },
            },
          ],
        },
        w = {
          className: "keyword",
          begin:
            "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
          starts: {
            end: "[;{}]",
            keywords: u,
            returnEnd: !0,
            contains: b,
            relevance: 0,
          },
        },
        y = {
          className: "variable",
          variants: [
            { begin: "@" + d + "\\s*:", relevance: 15 },
            { begin: "@" + d },
          ],
          starts: { end: "[;}]", returnEnd: !0, contains: f },
        },
        x = {
          variants: [
            {
              begin: "[\\.#:&\\[>]",
              end: "[;{}]",
            },
            { begin: c, end: /\{/ },
          ],
          returnBegin: !0,
          returnEnd: !0,
          illegal: "[<='$\"]",
          relevance: 0,
          contains: [
            a.C_LINE_COMMENT_MODE,
            a.C_BLOCK_COMMENT_MODE,
            k,
            p("keyword", "all\\b"),
            p("variable", "@\\{" + d + "\\}"),
            {
              begin: "\\b(" + e.join("|") + ")\\b",
              className: "selector-tag",
            },
            l.CSS_NUMBER_MODE,
            p("selector-tag", c, 0),
            p("selector-id", "#" + c),
            p("selector-class", "\\." + c, 0),
            p("selector-tag", "&", 0),
            l.ATTRIBUTE_SELECTOR_MODE,
            {
              className: "selector-pseudo",
              begin: ":(" + r.join("|") + ")",
            },
            {
              className: "selector-pseudo",
              begin: ":(:)?(" + i.join("|") + ")",
            },
            { begin: /\(/, end: /\)/, relevance: 0, contains: f },
            { begin: "!important" },
            l.FUNCTION_DISPATCH,
          ],
        },
        _ = {
          begin: d + ":(:)?" + `(${s.join("|")})`,
          returnBegin: !0,
          contains: [x],
        };
      return (
        g.push(
          a.C_LINE_COMMENT_MODE,
          a.C_BLOCK_COMMENT_MODE,
          w,
          y,
          _,
          v,
          x,
          k,
          l.FUNCTION_DISPATCH,
        ),
        {
          name: "Less",
          case_insensitive: !0,
          illegal: "[=>'/<($\"]",
          contains: g,
        }
      );
    };
  })();
  hljs.registerLanguage("less", e);
})(); /*! `markdown` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = {
          begin: /<\/?[A-Za-z_]/,
          end: ">",
          subLanguage: "xml",
          relevance: 0,
        },
        a = {
          variants: [
            { begin: /\[.+?\]\[.*?\]/, relevance: 0 },
            {
              begin:
                /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
              relevance: 2,
            },
            {
              begin: e.regex.concat(
                /\[.+?\]\(/,
                /[A-Za-z][A-Za-z0-9+.-]*/,
                /:\/\/.*?\)/,
              ),
              relevance: 2,
            },
            { begin: /\[.+?\]\([./?&#].*?\)/, relevance: 1 },
            {
              begin: /\[.*?\]\(.*?\)/,
              relevance: 0,
            },
          ],
          returnBegin: !0,
          contains: [
            { match: /\[(?=\])/ },
            {
              className: "string",
              relevance: 0,
              begin: "\\[",
              end: "\\]",
              excludeBegin: !0,
              returnEnd: !0,
            },
            {
              className: "link",
              relevance: 0,
              begin: "\\]\\(",
              end: "\\)",
              excludeBegin: !0,
              excludeEnd: !0,
            },
            {
              className: "symbol",
              relevance: 0,
              begin: "\\]\\[",
              end: "\\]",
              excludeBegin: !0,
              excludeEnd: !0,
            },
          ],
        },
        i = {
          className: "strong",
          contains: [],
          variants: [
            { begin: /_{2}(?!\s)/, end: /_{2}/ },
            { begin: /\*{2}(?!\s)/, end: /\*{2}/ },
          ],
        },
        s = {
          className: "emphasis",
          contains: [],
          variants: [
            { begin: /\*(?![*\s])/, end: /\*/ },
            {
              begin: /_(?![_\s])/,
              end: /_/,
              relevance: 0,
            },
          ],
        },
        c = e.inherit(i, { contains: [] }),
        t = e.inherit(s, { contains: [] });
      i.contains.push(t), s.contains.push(c);
      let g = [n, a];
      return (
        [i, s, c, t].forEach((e) => {
          e.contains = e.contains.concat(g);
        }),
        (g = g.concat(i, s)),
        {
          name: "Markdown",
          aliases: ["md", "mkdown", "mkd"],
          contains: [
            {
              className: "section",
              variants: [
                { begin: "^#{1,6}", end: "$", contains: g },
                {
                  begin: "(?=^.+?\\n[=-]{2,}$)",
                  contains: [
                    { begin: "^[=-]*$" },
                    { begin: "^", end: "\\n", contains: g },
                  ],
                },
              ],
            },
            n,
            {
              className: "bullet",
              begin: "^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)",
              end: "\\s+",
              excludeEnd: !0,
            },
            i,
            s,
            { className: "quote", begin: "^>\\s+", contains: g, end: "$" },
            {
              className: "code",
              variants: [
                { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
                {
                  begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*",
                },
                { begin: "```", end: "```+[ ]*$" },
                {
                  begin: "~~~",
                  end: "~~~+[ ]*$",
                },
                { begin: "`.+?`" },
                {
                  begin: "(?=^( {4}|\\t))",
                  contains: [{ begin: "^( {4}|\\t)", end: "(\\n)$" }],
                  relevance: 0,
                },
              ],
            },
            {
              begin: "^[-\\*]{3,}",
              end: "$",
            },
            a,
            {
              begin: /^\[[^\n]+\]:/,
              returnBegin: !0,
              contains: [
                {
                  className: "symbol",
                  begin: /\[/,
                  end: /\]/,
                  excludeBegin: !0,
                  excludeEnd: !0,
                },
                {
                  className: "link",
                  begin: /:\s*/,
                  end: /$/,
                  excludeBegin: !0,
                },
              ],
            },
          ],
        }
      );
    };
  })();
  hljs.registerLanguage("markdown", e);
})(); /*! `powershell` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = {
          $pattern: /-?[A-z\.\-]+\b/,
          keyword:
            "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
          built_in:
            "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write",
        },
        s = { begin: "`[\\s\\S]", relevance: 0 },
        i = {
          className: "variable",
          variants: [
            {
              begin: /\$\B/,
            },
            { className: "keyword", begin: /\$this/ },
            { begin: /\$[\w\d][\w\d_:]*/ },
          ],
        },
        a = {
          className: "string",
          variants: [
            { begin: /"/, end: /"/ },
            { begin: /@"/, end: /^"@/ },
          ],
          contains: [
            s,
            i,
            { className: "variable", begin: /\$[A-z]/, end: /[^A-z]/ },
          ],
        },
        t = {
          className: "string",
          variants: [
            { begin: /'/, end: /'/ },
            { begin: /@'/, end: /^'@/ },
          ],
        },
        r = e.inherit(e.COMMENT(null, null), {
          variants: [
            { begin: /#/, end: /$/ },
            { begin: /<#/, end: /#>/ },
          ],
          contains: [
            {
              className: "doctag",
              variants: [
                {
                  begin:
                    /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/,
                },
                {
                  begin:
                    /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/,
                },
              ],
            },
          ],
        }),
        c = {
          className: "class",
          beginKeywords: "class enum",
          end: /\s*[{]/,
          excludeEnd: !0,
          relevance: 0,
          contains: [e.TITLE_MODE],
        },
        l = {
          className: "function",
          begin: /function\s+/,
          end: /\s*\{|$/,
          excludeEnd: !0,
          returnBegin: !0,
          relevance: 0,
          contains: [
            { begin: "function", relevance: 0, className: "keyword" },
            {
              className: "title",
              begin: /\w[\w\d]*((-)[\w\d]+)*/,
              relevance: 0,
            },
            {
              begin: /\(/,
              end: /\)/,
              className: "params",
              relevance: 0,
              contains: [i],
            },
          ],
        },
        o = {
          begin: /using\s/,
          end: /$/,
          returnBegin: !0,
          contains: [
            a,
            t,
            {
              className: "keyword",
              begin: /(using|assembly|command|module|namespace|type)/,
            },
          ],
        },
        p = {
          className: "function",
          begin: /\[.*\]\s*[\w]+[ ]??\(/,
          end: /$/,
          returnBegin: !0,
          relevance: 0,
          contains: [
            {
              className: "keyword",
              begin: "(".concat(
                n.keyword.toString().replace(/\s/g, "|"),
                ")\\b",
              ),
              endsParent: !0,
              relevance: 0,
            },
            e.inherit(e.TITLE_MODE, { endsParent: !0 }),
          ],
        },
        g = [
          p,
          r,
          s,
          e.NUMBER_MODE,
          a,
          t,
          {
            className: "built_in",
            variants: [
              {
                begin:
                  "(Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where)+(-)[\\w\\d]+",
              },
            ],
          },
          i,
          { className: "literal", begin: /\$(null|true|false)\b/ },
          {
            className: "selector-tag",
            begin: /@\B/,
            relevance: 0,
          },
        ],
        m = {
          begin: /\[/,
          end: /\]/,
          excludeBegin: !0,
          excludeEnd: !0,
          relevance: 0,
          contains: [].concat(
            "self",
            g,
            {
              begin:
                "(string|char|byte|int|long|bool|decimal|single|double|DateTime|xml|array|hashtable|void)",
              className: "built_in",
              relevance: 0,
            },
            { className: "type", begin: /[\.\w\d]+/, relevance: 0 },
          ),
        };
      return (
        p.contains.unshift(m),
        {
          name: "PowerShell",
          aliases: ["pwsh", "ps", "ps1"],
          case_insensitive: !0,
          keywords: n,
          contains: g.concat(
            c,
            l,
            o,
            {
              variants: [
                {
                  className: "operator",
                  begin:
                    "(-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor)\\b",
                },
                {
                  className: "literal",
                  begin: /(-){1,2}[\w\d-]+/,
                  relevance: 0,
                },
              ],
            },
            m,
          ),
        }
      );
    };
  })();
  hljs.registerLanguage("powershell", e);
})(); /*! `rust` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const t = e.regex,
        a = {
          className: "title.function.invoke",
          relevance: 0,
          begin: t.concat(/\b/, /(?!let\b)/, e.IDENT_RE, t.lookahead(/\s*\(/)),
        },
        n = "([ui](8|16|32|64|128|size)|f(32|64))?",
        s = [
          "drop ",
          "Copy",
          "Send",
          "Sized",
          "Sync",
          "Drop",
          "Fn",
          "FnMut",
          "FnOnce",
          "ToOwned",
          "Clone",
          "Debug",
          "PartialEq",
          "PartialOrd",
          "Eq",
          "Ord",
          "AsRef",
          "AsMut",
          "Into",
          "From",
          "Default",
          "Iterator",
          "Extend",
          "IntoIterator",
          "DoubleEndedIterator",
          "ExactSizeIterator",
          "SliceConcatExt",
          "ToString",
          "assert!",
          "assert_eq!",
          "bitflags!",
          "bytes!",
          "cfg!",
          "col!",
          "concat!",
          "concat_idents!",
          "debug_assert!",
          "debug_assert_eq!",
          "env!",
          "panic!",
          "file!",
          "format!",
          "format_args!",
          "include_bytes!",
          "include_str!",
          "line!",
          "local_data_key!",
          "module_path!",
          "option_env!",
          "print!",
          "println!",
          "select!",
          "stringify!",
          "try!",
          "unimplemented!",
          "unreachable!",
          "vec!",
          "write!",
          "writeln!",
          "macro_rules!",
          "assert_ne!",
          "debug_assert_ne!",
        ],
        r = [
          "i8",
          "i16",
          "i32",
          "i64",
          "i128",
          "isize",
          "u8",
          "u16",
          "u32",
          "u64",
          "u128",
          "usize",
          "f32",
          "f64",
          "str",
          "char",
          "bool",
          "Box",
          "Option",
          "Result",
          "String",
          "Vec",
        ];
      return {
        name: "Rust",
        aliases: ["rs"],
        keywords: {
          $pattern: e.IDENT_RE + "!?",
          type: r,
          keyword: [
            "abstract",
            "as",
            "async",
            "await",
            "become",
            "box",
            "break",
            "const",
            "continue",
            "crate",
            "do",
            "dyn",
            "else",
            "enum",
            "extern",
            "false",
            "final",
            "fn",
            "for",
            "if",
            "impl",
            "in",
            "let",
            "loop",
            "macro",
            "match",
            "mod",
            "move",
            "mut",
            "override",
            "priv",
            "pub",
            "ref",
            "return",
            "self",
            "Self",
            "static",
            "struct",
            "super",
            "trait",
            "true",
            "try",
            "type",
            "typeof",
            "unsafe",
            "unsized",
            "use",
            "virtual",
            "where",
            "while",
            "yield",
          ],
          literal: ["true", "false", "Some", "None", "Ok", "Err"],
          built_in: s,
        },
        illegal: "</",
        contains: [
          e.C_LINE_COMMENT_MODE,
          e.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
          e.inherit(e.QUOTE_STRING_MODE, { begin: /b?"/, illegal: null }),
          {
            className: "string",
            variants: [
              { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
              {
                begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/,
              },
            ],
          },
          { className: "symbol", begin: /'[a-zA-Z_][a-zA-Z0-9_]*/ },
          {
            className: "number",
            variants: [
              {
                begin: "\\b0b([01_]+)" + n,
              },
              { begin: "\\b0o([0-7_]+)" + n },
              {
                begin: "\\b0x([A-Fa-f0-9_]+)" + n,
              },
              {
                begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + n,
              },
            ],
            relevance: 0,
          },
          {
            begin: [/fn/, /\s+/, e.UNDERSCORE_IDENT_RE],
            className: { 1: "keyword", 3: "title.function" },
          },
          {
            className: "meta",
            begin: "#!?\\[",
            end: "\\]",
            contains: [
              {
                className: "string",
                begin: /"/,
                end: /"/,
              },
            ],
          },
          {
            begin: [/let/, /\s+/, /(?:mut\s+)?/, e.UNDERSCORE_IDENT_RE],
            className: { 1: "keyword", 3: "keyword", 4: "variable" },
          },
          {
            begin: [/for/, /\s+/, e.UNDERSCORE_IDENT_RE, /\s+/, /in/],
            className: { 1: "keyword", 3: "variable", 5: "keyword" },
          },
          {
            begin: [/type/, /\s+/, e.UNDERSCORE_IDENT_RE],
            className: { 1: "keyword", 3: "title.class" },
          },
          {
            begin: [
              /(?:trait|enum|struct|union|impl|for)/,
              /\s+/,
              e.UNDERSCORE_IDENT_RE,
            ],
            className: { 1: "keyword", 3: "title.class" },
          },
          {
            begin: e.IDENT_RE + "::",
            keywords: {
              keyword: "Self",
              built_in: s,
              type: r,
            },
          },
          { className: "punctuation", begin: "->" },
          a,
        ],
      };
    };
  })();
  hljs.registerLanguage("rust", e);
})(); /*! `scala` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const n = e.regex,
        a = {
          className: "subst",
          variants: [
            { begin: "\\$[A-Za-z0-9_]+" },
            { begin: /\$\{/, end: /\}/ },
          ],
        },
        s = {
          className: "string",
          variants: [
            { begin: '"""', end: '"""' },
            {
              begin: '"',
              end: '"',
              illegal: "\\n",
              contains: [e.BACKSLASH_ESCAPE],
            },
            {
              begin: '[a-z]+"',
              end: '"',
              illegal: "\\n",
              contains: [e.BACKSLASH_ESCAPE, a],
            },
            {
              className: "string",
              begin: '[a-z]+"""',
              end: '"""',
              contains: [a],
              relevance: 10,
            },
          ],
        },
        i = { className: "type", begin: "\\b[A-Z][A-Za-z0-9_]*", relevance: 0 },
        t = {
          className: "title",
          begin:
            /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
          relevance: 0,
        },
        l = {
          className: "class",
          beginKeywords: "class object trait type",
          end: /[:={\[\n;]/,
          excludeEnd: !0,
          contains: [
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            {
              beginKeywords: "extends with",
              relevance: 10,
            },
            {
              begin: /\[/,
              end: /\]/,
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0,
              contains: [i],
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: !0,
              excludeEnd: !0,
              relevance: 0,
              contains: [i],
            },
            t,
          ],
        },
        r = {
          className: "function",
          beginKeywords: "def",
          end: n.lookahead(/[:={\[(\n;]/),
          contains: [t],
        };
      return {
        name: "Scala",
        keywords: {
          literal: "true false null",
          keyword:
            "type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent",
        },
        contains: [
          e.C_LINE_COMMENT_MODE,
          e.C_BLOCK_COMMENT_MODE,
          s,
          i,
          r,
          l,
          e.C_NUMBER_MODE,
          {
            begin: [/^\s*/, "extension", /\s+(?=[[(])/],
            beginScope: { 2: "keyword" },
          },
          {
            begin: [/^\s*/, /end/, /\s+/, /(extension\b)?/],
            beginScope: { 2: "keyword", 4: "keyword" },
          },
          { match: /\.inline\b/ },
          { begin: /\binline(?=\s)/, keywords: "inline" },
          {
            begin: [/\(\s*/, /using/, /\s+(?!\))/],
            beginScope: { 2: "keyword" },
          },
          { className: "meta", begin: "@[A-Za-z]+" },
        ],
      };
    };
  })();
  hljs.registerLanguage("scala", e);
})(); /*! `scss` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    const e = [
        "a",
        "abbr",
        "address",
        "article",
        "aside",
        "audio",
        "b",
        "blockquote",
        "body",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "dd",
        "del",
        "details",
        "dfn",
        "div",
        "dl",
        "dt",
        "em",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "main",
        "mark",
        "menu",
        "nav",
        "object",
        "ol",
        "p",
        "q",
        "quote",
        "samp",
        "section",
        "span",
        "strong",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "tr",
        "ul",
        "var",
        "video",
      ],
      r = [
        "any-hover",
        "any-pointer",
        "aspect-ratio",
        "color",
        "color-gamut",
        "color-index",
        "device-aspect-ratio",
        "device-height",
        "device-width",
        "display-mode",
        "forced-colors",
        "grid",
        "height",
        "hover",
        "inverted-colors",
        "monochrome",
        "orientation",
        "overflow-block",
        "overflow-inline",
        "pointer",
        "prefers-color-scheme",
        "prefers-contrast",
        "prefers-reduced-motion",
        "prefers-reduced-transparency",
        "resolution",
        "scan",
        "scripting",
        "update",
        "width",
        "min-width",
        "max-width",
        "min-height",
        "max-height",
      ],
      i = [
        "active",
        "any-link",
        "blank",
        "checked",
        "current",
        "default",
        "defined",
        "dir",
        "disabled",
        "drop",
        "empty",
        "enabled",
        "first",
        "first-child",
        "first-of-type",
        "fullscreen",
        "future",
        "focus",
        "focus-visible",
        "focus-within",
        "has",
        "host",
        "host-context",
        "hover",
        "indeterminate",
        "in-range",
        "invalid",
        "is",
        "lang",
        "last-child",
        "last-of-type",
        "left",
        "link",
        "local-link",
        "not",
        "nth-child",
        "nth-col",
        "nth-last-child",
        "nth-last-col",
        "nth-last-of-type",
        "nth-of-type",
        "only-child",
        "only-of-type",
        "optional",
        "out-of-range",
        "past",
        "placeholder-shown",
        "read-only",
        "read-write",
        "required",
        "right",
        "root",
        "scope",
        "target",
        "target-within",
        "user-invalid",
        "valid",
        "visited",
        "where",
      ],
      t = [
        "after",
        "backdrop",
        "before",
        "cue",
        "cue-region",
        "first-letter",
        "first-line",
        "grammar-error",
        "marker",
        "part",
        "placeholder",
        "selection",
        "slotted",
        "spelling-error",
      ],
      o = [
        "align-content",
        "align-items",
        "align-self",
        "all",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "backface-visibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-repeat",
        "background-size",
        "block-size",
        "border",
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "bottom",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "break-after",
        "break-before",
        "break-inside",
        "caption-side",
        "caret-color",
        "clear",
        "clip",
        "clip-path",
        "clip-rule",
        "color",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columns",
        "contain",
        "content",
        "content-visibility",
        "counter-increment",
        "counter-reset",
        "cue",
        "cue-after",
        "cue-before",
        "cursor",
        "direction",
        "display",
        "empty-cells",
        "filter",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "float",
        "flow",
        "font",
        "font-display",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-size",
        "font-size-adjust",
        "font-smoothing",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "gap",
        "glyph-orientation-vertical",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "hanging-punctuation",
        "height",
        "hyphens",
        "icon",
        "image-orientation",
        "image-rendering",
        "image-resolution",
        "ime-mode",
        "inline-size",
        "isolation",
        "justify-content",
        "left",
        "letter-spacing",
        "line-break",
        "line-height",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "margin",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-bottom",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "margin-left",
        "margin-right",
        "margin-top",
        "marks",
        "mask",
        "mask-border",
        "mask-border-mode",
        "mask-border-outset",
        "mask-border-repeat",
        "mask-border-slice",
        "mask-border-source",
        "mask-border-width",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "mix-blend-mode",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "none",
        "normal",
        "object-fit",
        "object-position",
        "opacity",
        "order",
        "orphans",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "overflow",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "padding",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-bottom",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "padding-left",
        "padding-right",
        "padding-top",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "pause",
        "pause-after",
        "pause-before",
        "perspective",
        "perspective-origin",
        "pointer-events",
        "position",
        "quotes",
        "resize",
        "rest",
        "rest-after",
        "rest-before",
        "right",
        "row-gap",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-stop",
        "scroll-snap-type",
        "scrollbar-color",
        "scrollbar-gutter",
        "scrollbar-width",
        "shape-image-threshold",
        "shape-margin",
        "shape-outside",
        "speak",
        "speak-as",
        "src",
        "tab-size",
        "table-layout",
        "text-align",
        "text-align-all",
        "text-align-last",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-style",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-transform",
        "text-underline-position",
        "top",
        "transform",
        "transform-box",
        "transform-origin",
        "transform-style",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "unicode-bidi",
        "vertical-align",
        "visibility",
        "voice-balance",
        "voice-duration",
        "voice-family",
        "voice-pitch",
        "voice-range",
        "voice-rate",
        "voice-stress",
        "voice-volume",
        "white-space",
        "widows",
        "width",
        "will-change",
        "word-break",
        "word-spacing",
        "word-wrap",
        "writing-mode",
        "z-index",
      ].reverse();
    return (n) => {
      const a = ((e) => ({
          IMPORTANT: { scope: "meta", begin: "!important" },
          BLOCK_COMMENT: e.C_BLOCK_COMMENT_MODE,
          HEXCOLOR: {
            scope: "number",
            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/,
          },
          FUNCTION_DISPATCH: {
            className: "built_in",
            begin: /[\w-]+(?=\()/,
          },
          ATTRIBUTE_SELECTOR_MODE: {
            scope: "selector-attr",
            begin: /\[/,
            end: /\]/,
            illegal: "$",
            contains: [e.APOS_STRING_MODE, e.QUOTE_STRING_MODE],
          },
          CSS_NUMBER_MODE: {
            scope: "number",
            begin:
              e.NUMBER_RE +
              "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
            relevance: 0,
          },
          CSS_VARIABLE: {
            className: "attr",
            begin: /--[A-Za-z][A-Za-z0-9_-]*/,
          },
        }))(n),
        l = t,
        s = i,
        d = "@[a-z-]+",
        c = {
          className: "variable",
          begin: "(\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\b",
          relevance: 0,
        };
      return {
        name: "SCSS",
        case_insensitive: !0,
        illegal: "[=/|']",
        contains: [
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE,
          a.CSS_NUMBER_MODE,
          {
            className: "selector-id",
            begin: "#[A-Za-z0-9_-]+",
            relevance: 0,
          },
          {
            className: "selector-class",
            begin: "\\.[A-Za-z0-9_-]+",
            relevance: 0,
          },
          a.ATTRIBUTE_SELECTOR_MODE,
          {
            className: "selector-tag",
            begin: "\\b(" + e.join("|") + ")\\b",
            relevance: 0,
          },
          { className: "selector-pseudo", begin: ":(" + s.join("|") + ")" },
          { className: "selector-pseudo", begin: ":(:)?(" + l.join("|") + ")" },
          c,
          { begin: /\(/, end: /\)/, contains: [a.CSS_NUMBER_MODE] },
          a.CSS_VARIABLE,
          { className: "attribute", begin: "\\b(" + o.join("|") + ")\\b" },
          {
            begin:
              "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b",
          },
          {
            begin: /:/,
            end: /[;}{]/,
            relevance: 0,
            contains: [
              a.BLOCK_COMMENT,
              c,
              a.HEXCOLOR,
              a.CSS_NUMBER_MODE,
              n.QUOTE_STRING_MODE,
              n.APOS_STRING_MODE,
              a.IMPORTANT,
              a.FUNCTION_DISPATCH,
            ],
          },
          {
            begin: "@(page|font-face)",
            keywords: { $pattern: d, keyword: "@page @font-face" },
          },
          {
            begin: "@",
            end: "[{;]",
            returnBegin: !0,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: "and or not only",
              attribute: r.join(" "),
            },
            contains: [
              { begin: d, className: "keyword" },
              { begin: /[a-z-]+(?=:)/, className: "attribute" },
              c,
              n.QUOTE_STRING_MODE,
              n.APOS_STRING_MODE,
              a.HEXCOLOR,
              a.CSS_NUMBER_MODE,
            ],
          },
          a.FUNCTION_DISPATCH,
        ],
      };
    };
  })();
  hljs.registerLanguage("scss", e);
})(); /*! `sql` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const r = e.regex,
        t = e.COMMENT("--", "$"),
        n = ["true", "false", "unknown"],
        a = [
          "bigint",
          "binary",
          "blob",
          "boolean",
          "char",
          "character",
          "clob",
          "date",
          "dec",
          "decfloat",
          "decimal",
          "float",
          "int",
          "integer",
          "interval",
          "nchar",
          "nclob",
          "national",
          "numeric",
          "real",
          "row",
          "smallint",
          "time",
          "timestamp",
          "varchar",
          "varying",
          "varbinary",
        ],
        i = [
          "abs",
          "acos",
          "array_agg",
          "asin",
          "atan",
          "avg",
          "cast",
          "ceil",
          "ceiling",
          "coalesce",
          "corr",
          "cos",
          "cosh",
          "count",
          "covar_pop",
          "covar_samp",
          "cume_dist",
          "dense_rank",
          "deref",
          "element",
          "exp",
          "extract",
          "first_value",
          "floor",
          "json_array",
          "json_arrayagg",
          "json_exists",
          "json_object",
          "json_objectagg",
          "json_query",
          "json_table",
          "json_table_primitive",
          "json_value",
          "lag",
          "last_value",
          "lead",
          "listagg",
          "ln",
          "log",
          "log10",
          "lower",
          "max",
          "min",
          "mod",
          "nth_value",
          "ntile",
          "nullif",
          "percent_rank",
          "percentile_cont",
          "percentile_disc",
          "position",
          "position_regex",
          "power",
          "rank",
          "regr_avgx",
          "regr_avgy",
          "regr_count",
          "regr_intercept",
          "regr_r2",
          "regr_slope",
          "regr_sxx",
          "regr_sxy",
          "regr_syy",
          "row_number",
          "sin",
          "sinh",
          "sqrt",
          "stddev_pop",
          "stddev_samp",
          "substring",
          "substring_regex",
          "sum",
          "tan",
          "tanh",
          "translate",
          "translate_regex",
          "treat",
          "trim",
          "trim_array",
          "unnest",
          "upper",
          "value_of",
          "var_pop",
          "var_samp",
          "width_bucket",
        ],
        s = [
          "create table",
          "insert into",
          "primary key",
          "foreign key",
          "not null",
          "alter table",
          "add constraint",
          "grouping sets",
          "on overflow",
          "character set",
          "respect nulls",
          "ignore nulls",
          "nulls first",
          "nulls last",
          "depth first",
          "breadth first",
        ],
        o = i,
        c = [
          "abs",
          "acos",
          "all",
          "allocate",
          "alter",
          "and",
          "any",
          "are",
          "array",
          "array_agg",
          "array_max_cardinality",
          "as",
          "asensitive",
          "asin",
          "asymmetric",
          "at",
          "atan",
          "atomic",
          "authorization",
          "avg",
          "begin",
          "begin_frame",
          "begin_partition",
          "between",
          "bigint",
          "binary",
          "blob",
          "boolean",
          "both",
          "by",
          "call",
          "called",
          "cardinality",
          "cascaded",
          "case",
          "cast",
          "ceil",
          "ceiling",
          "char",
          "char_length",
          "character",
          "character_length",
          "check",
          "classifier",
          "clob",
          "close",
          "coalesce",
          "collate",
          "collect",
          "column",
          "commit",
          "condition",
          "connect",
          "constraint",
          "contains",
          "convert",
          "copy",
          "corr",
          "corresponding",
          "cos",
          "cosh",
          "count",
          "covar_pop",
          "covar_samp",
          "create",
          "cross",
          "cube",
          "cume_dist",
          "current",
          "current_catalog",
          "current_date",
          "current_default_transform_group",
          "current_path",
          "current_role",
          "current_row",
          "current_schema",
          "current_time",
          "current_timestamp",
          "current_path",
          "current_role",
          "current_transform_group_for_type",
          "current_user",
          "cursor",
          "cycle",
          "date",
          "day",
          "deallocate",
          "dec",
          "decimal",
          "decfloat",
          "declare",
          "default",
          "define",
          "delete",
          "dense_rank",
          "deref",
          "describe",
          "deterministic",
          "disconnect",
          "distinct",
          "double",
          "drop",
          "dynamic",
          "each",
          "element",
          "else",
          "empty",
          "end",
          "end_frame",
          "end_partition",
          "end-exec",
          "equals",
          "escape",
          "every",
          "except",
          "exec",
          "execute",
          "exists",
          "exp",
          "external",
          "extract",
          "false",
          "fetch",
          "filter",
          "first_value",
          "float",
          "floor",
          "for",
          "foreign",
          "frame_row",
          "free",
          "from",
          "full",
          "function",
          "fusion",
          "get",
          "global",
          "grant",
          "group",
          "grouping",
          "groups",
          "having",
          "hold",
          "hour",
          "identity",
          "in",
          "indicator",
          "initial",
          "inner",
          "inout",
          "insensitive",
          "insert",
          "int",
          "integer",
          "intersect",
          "intersection",
          "interval",
          "into",
          "is",
          "join",
          "json_array",
          "json_arrayagg",
          "json_exists",
          "json_object",
          "json_objectagg",
          "json_query",
          "json_table",
          "json_table_primitive",
          "json_value",
          "lag",
          "language",
          "large",
          "last_value",
          "lateral",
          "lead",
          "leading",
          "left",
          "like",
          "like_regex",
          "listagg",
          "ln",
          "local",
          "localtime",
          "localtimestamp",
          "log",
          "log10",
          "lower",
          "match",
          "match_number",
          "match_recognize",
          "matches",
          "max",
          "member",
          "merge",
          "method",
          "min",
          "minute",
          "mod",
          "modifies",
          "module",
          "month",
          "multiset",
          "national",
          "natural",
          "nchar",
          "nclob",
          "new",
          "no",
          "none",
          "normalize",
          "not",
          "nth_value",
          "ntile",
          "null",
          "nullif",
          "numeric",
          "octet_length",
          "occurrences_regex",
          "of",
          "offset",
          "old",
          "omit",
          "on",
          "one",
          "only",
          "open",
          "or",
          "order",
          "out",
          "outer",
          "over",
          "overlaps",
          "overlay",
          "parameter",
          "partition",
          "pattern",
          "per",
          "percent",
          "percent_rank",
          "percentile_cont",
          "percentile_disc",
          "period",
          "portion",
          "position",
          "position_regex",
          "power",
          "precedes",
          "precision",
          "prepare",
          "primary",
          "procedure",
          "ptf",
          "range",
          "rank",
          "reads",
          "real",
          "recursive",
          "ref",
          "references",
          "referencing",
          "regr_avgx",
          "regr_avgy",
          "regr_count",
          "regr_intercept",
          "regr_r2",
          "regr_slope",
          "regr_sxx",
          "regr_sxy",
          "regr_syy",
          "release",
          "result",
          "return",
          "returns",
          "revoke",
          "right",
          "rollback",
          "rollup",
          "row",
          "row_number",
          "rows",
          "running",
          "savepoint",
          "scope",
          "scroll",
          "search",
          "second",
          "seek",
          "select",
          "sensitive",
          "session_user",
          "set",
          "show",
          "similar",
          "sin",
          "sinh",
          "skip",
          "smallint",
          "some",
          "specific",
          "specifictype",
          "sql",
          "sqlexception",
          "sqlstate",
          "sqlwarning",
          "sqrt",
          "start",
          "static",
          "stddev_pop",
          "stddev_samp",
          "submultiset",
          "subset",
          "substring",
          "substring_regex",
          "succeeds",
          "sum",
          "symmetric",
          "system",
          "system_time",
          "system_user",
          "table",
          "tablesample",
          "tan",
          "tanh",
          "then",
          "time",
          "timestamp",
          "timezone_hour",
          "timezone_minute",
          "to",
          "trailing",
          "translate",
          "translate_regex",
          "translation",
          "treat",
          "trigger",
          "trim",
          "trim_array",
          "true",
          "truncate",
          "uescape",
          "union",
          "unique",
          "unknown",
          "unnest",
          "update",
          "upper",
          "user",
          "using",
          "value",
          "values",
          "value_of",
          "var_pop",
          "var_samp",
          "varbinary",
          "varchar",
          "varying",
          "versioning",
          "when",
          "whenever",
          "where",
          "width_bucket",
          "window",
          "with",
          "within",
          "without",
          "year",
          "add",
          "asc",
          "collation",
          "desc",
          "final",
          "first",
          "last",
          "view",
        ].filter((e) => !i.includes(e)),
        l = {
          begin: r.concat(/\b/, r.either(...o), /\s*\(/),
          relevance: 0,
          keywords: { built_in: o },
        };
      return {
        name: "SQL",
        case_insensitive: !0,
        illegal: /[{}]|<\//,
        keywords: {
          $pattern: /\b[\w\.]+/,
          keyword: ((e, { exceptions: r, when: t } = {}) => {
            const n = t;
            return (
              (r = r || []),
              e.map((e) =>
                e.match(/\|\d+$/) || r.includes(e) ? e : n(e) ? e + "|0" : e,
              )
            );
          })(c, { when: (e) => e.length < 3 }),
          literal: n,
          type: a,
          built_in: [
            "current_catalog",
            "current_date",
            "current_default_transform_group",
            "current_path",
            "current_role",
            "current_schema",
            "current_transform_group_for_type",
            "current_user",
            "session_user",
            "system_time",
            "system_user",
            "current_time",
            "localtime",
            "current_timestamp",
            "localtimestamp",
          ],
        },
        contains: [
          {
            begin: r.either(...s),
            relevance: 0,
            keywords: {
              $pattern: /[\w\.]+/,
              keyword: c.concat(s),
              literal: n,
              type: a,
            },
          },
          {
            className: "type",
            begin: r.either(
              "double precision",
              "large object",
              "with timezone",
              "without timezone",
            ),
          },
          l,
          { className: "variable", begin: /@[a-z0-9][a-z0-9_]*/ },
          {
            className: "string",
            variants: [{ begin: /'/, end: /'/, contains: [{ begin: /''/ }] }],
          },
          { begin: /"/, end: /"/, contains: [{ begin: /""/ }] },
          e.C_NUMBER_MODE,
          e.C_BLOCK_COMMENT_MODE,
          t,
          {
            className: "operator",
            begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
            relevance: 0,
          },
        ],
      };
    };
  })();
  hljs.registerLanguage("sql", e);
})(); /*! `swift` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    function e(e) {
      return e ? ("string" == typeof e ? e : e.source) : null;
    }
    function a(e) {
      return t("(?=", e, ")");
    }
    function t(...a) {
      return a.map((a) => e(a)).join("");
    }
    function n(...a) {
      const t = ((e) => {
        const a = e[e.length - 1];
        return "object" == typeof a && a.constructor === Object
          ? (e.splice(e.length - 1, 1), a)
          : {};
      })(a);
      return "(" + (t.capture ? "" : "?:") + a.map((a) => e(a)).join("|") + ")";
    }
    const i = (e) => t(/\b/, e, /\w$/.test(e) ? /\b/ : /\B/),
      s = ["Protocol", "Type"].map(i),
      u = ["init", "self"].map(i),
      c = ["Any", "Self"],
      r = [
        "actor",
        "any",
        "associatedtype",
        "async",
        "await",
        /as\?/,
        /as!/,
        "as",
        "break",
        "case",
        "catch",
        "class",
        "continue",
        "convenience",
        "default",
        "defer",
        "deinit",
        "didSet",
        "distributed",
        "do",
        "dynamic",
        "else",
        "enum",
        "extension",
        "fallthrough",
        /fileprivate\(set\)/,
        "fileprivate",
        "final",
        "for",
        "func",
        "get",
        "guard",
        "if",
        "import",
        "indirect",
        "infix",
        /init\?/,
        /init!/,
        "inout",
        /internal\(set\)/,
        "internal",
        "in",
        "is",
        "isolated",
        "nonisolated",
        "lazy",
        "let",
        "mutating",
        "nonmutating",
        /open\(set\)/,
        "open",
        "operator",
        "optional",
        "override",
        "postfix",
        "precedencegroup",
        "prefix",
        /private\(set\)/,
        "private",
        "protocol",
        /public\(set\)/,
        "public",
        "repeat",
        "required",
        "rethrows",
        "return",
        "set",
        "some",
        "static",
        "struct",
        "subscript",
        "super",
        "switch",
        "throws",
        "throw",
        /try\?/,
        /try!/,
        "try",
        "typealias",
        /unowned\(safe\)/,
        /unowned\(unsafe\)/,
        "unowned",
        "var",
        "weak",
        "where",
        "while",
        "willSet",
      ],
      o = ["false", "nil", "true"],
      l = [
        "assignment",
        "associativity",
        "higherThan",
        "left",
        "lowerThan",
        "none",
        "right",
      ],
      m = [
        "#colorLiteral",
        "#column",
        "#dsohandle",
        "#else",
        "#elseif",
        "#endif",
        "#error",
        "#file",
        "#fileID",
        "#fileLiteral",
        "#filePath",
        "#function",
        "#if",
        "#imageLiteral",
        "#keyPath",
        "#line",
        "#selector",
        "#sourceLocation",
        "#warn_unqualified_access",
        "#warning",
      ],
      p = [
        "abs",
        "all",
        "any",
        "assert",
        "assertionFailure",
        "debugPrint",
        "dump",
        "fatalError",
        "getVaList",
        "isKnownUniquelyReferenced",
        "max",
        "min",
        "numericCast",
        "pointwiseMax",
        "pointwiseMin",
        "precondition",
        "preconditionFailure",
        "print",
        "readLine",
        "repeatElement",
        "sequence",
        "stride",
        "swap",
        "swift_unboxFromSwiftValueWithType",
        "transcode",
        "type",
        "unsafeBitCast",
        "unsafeDowncast",
        "withExtendedLifetime",
        "withUnsafeMutablePointer",
        "withUnsafePointer",
        "withVaList",
        "withoutActuallyEscaping",
        "zip",
      ],
      d = n(
        /[/=\-+!*%<>&|^~?]/,
        /[\u00A1-\u00A7]/,
        /[\u00A9\u00AB]/,
        /[\u00AC\u00AE]/,
        /[\u00B0\u00B1]/,
        /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
        /[\u2016-\u2017]/,
        /[\u2020-\u2027]/,
        /[\u2030-\u203E]/,
        /[\u2041-\u2053]/,
        /[\u2055-\u205E]/,
        /[\u2190-\u23FF]/,
        /[\u2500-\u2775]/,
        /[\u2794-\u2BFF]/,
        /[\u2E00-\u2E7F]/,
        /[\u3001-\u3003]/,
        /[\u3008-\u3020]/,
        /[\u3030]/,
      ),
      F = n(
        d,
        /[\u0300-\u036F]/,
        /[\u1DC0-\u1DFF]/,
        /[\u20D0-\u20FF]/,
        /[\uFE00-\uFE0F]/,
        /[\uFE20-\uFE2F]/,
      ),
      b = t(d, F, "*"),
      h = n(
        /[a-zA-Z_]/,
        /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
        /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
        /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
        /[\u1E00-\u1FFF]/,
        /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
        /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
        /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
        /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
        /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
        /[\uFE47-\uFEFE\uFF00-\uFFFD]/,
      ),
      f = n(h, /\d/, /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/),
      w = t(h, f, "*"),
      y = t(/[A-Z]/, f, "*"),
      g = [
        "autoclosure",
        t(/convention\(/, n("swift", "block", "c"), /\)/),
        "discardableResult",
        "dynamicCallable",
        "dynamicMemberLookup",
        "escaping",
        "frozen",
        "GKInspectable",
        "IBAction",
        "IBDesignable",
        "IBInspectable",
        "IBOutlet",
        "IBSegueAction",
        "inlinable",
        "main",
        "nonobjc",
        "NSApplicationMain",
        "NSCopying",
        "NSManaged",
        t(/objc\(/, w, /\)/),
        "objc",
        "objcMembers",
        "propertyWrapper",
        "requires_stored_property_inits",
        "resultBuilder",
        "testable",
        "UIApplicationMain",
        "unknown",
        "usableFromInline",
      ],
      E = [
        "iOS",
        "iOSApplicationExtension",
        "macOS",
        "macOSApplicationExtension",
        "macCatalyst",
        "macCatalystApplicationExtension",
        "watchOS",
        "watchOSApplicationExtension",
        "tvOS",
        "tvOSApplicationExtension",
        "swift",
      ];
    return (e) => {
      const d = { match: /\s+/, relevance: 0 },
        h = e.COMMENT("/\\*", "\\*/", {
          contains: ["self"],
        }),
        v = [e.C_LINE_COMMENT_MODE, h],
        A = { match: [/\./, n(...s, ...u)], className: { 2: "keyword" } },
        N = { match: t(/\./, n(...r)), relevance: 0 },
        C = r.filter((e) => "string" == typeof e).concat(["_|0"]),
        D = {
          variants: [
            {
              className: "keyword",
              match: n(
                ...r
                  .filter((e) => "string" != typeof e)
                  .concat(c)
                  .map(i),
                ...u,
              ),
            },
          ],
        },
        k = {
          $pattern: n(/\b\w+/, /#\w+/),
          keyword: C.concat(m),
          literal: o,
        },
        B = [A, N, D],
        _ = [
          {
            match: t(/\./, n(...p)),
            relevance: 0,
          },
          { className: "built_in", match: t(/\b/, n(...p), /(?=\()/) },
        ],
        S = { match: /->/, relevance: 0 },
        M = [
          S,
          {
            className: "operator",
            relevance: 0,
            variants: [{ match: b }, { match: `\\.(\\.|${F})+` }],
          },
        ],
        x = "([0-9]_*)+",
        $ = "([0-9a-fA-F]_*)+",
        I = {
          className: "number",
          relevance: 0,
          variants: [
            { match: `\\b(${x})(\\.(${x}))?([eE][+-]?(${x}))?\\b` },
            {
              match: `\\b0x(${$})(\\.(${$}))?([pP][+-]?(${x}))?\\b`,
            },
            { match: /\b0o([0-7]_*)+\b/ },
            { match: /\b0b([01]_*)+\b/ },
          ],
        },
        L = (e = "") => ({
          className: "subst",
          variants: [
            {
              match: t(/\\/, e, /[0\\tnr"']/),
            },
            { match: t(/\\/, e, /u\{[0-9a-fA-F]{1,8}\}/) },
          ],
        }),
        O = (e = "") => ({
          className: "subst",
          match: t(/\\/, e, /[\t ]*(?:[\r\n]|\r\n)/),
        }),
        T = (e = "") => ({
          className: "subst",
          label: "interpol",
          begin: t(/\\/, e, /\(/),
          end: /\)/,
        }),
        j = (e = "") => ({
          begin: t(e, /"""/),
          end: t(/"""/, e),
          contains: [L(e), O(e), T(e)],
        }),
        P = (e = "") => ({
          begin: t(e, /"/),
          end: t(/"/, e),
          contains: [L(e), T(e)],
        }),
        K = {
          className: "string",
          variants: [
            j(),
            j("#"),
            j("##"),
            j("###"),
            P(),
            P("#"),
            P("##"),
            P("###"),
          ],
        },
        z = {
          match: t(/`/, w, /`/),
        },
        q = [
          z,
          { className: "variable", match: /\$\d+/ },
          {
            className: "variable",
            match: `\\$${f}+`,
          },
        ],
        U = [
          {
            match: /(@|#(un)?)available/,
            className: "keyword",
            starts: {
              contains: [
                { begin: /\(/, end: /\)/, keywords: E, contains: [...M, I, K] },
              ],
            },
          },
          { className: "keyword", match: t(/@/, n(...g)) },
          {
            className: "meta",
            match: t(/@/, w),
          },
        ],
        Z = {
          match: a(/\b[A-Z]/),
          relevance: 0,
          contains: [
            {
              className: "type",
              match: t(
                /(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/,
                f,
                "+",
              ),
            },
            { className: "type", match: y, relevance: 0 },
            { match: /[?!]+/, relevance: 0 },
            {
              match: /\.\.\./,
              relevance: 0,
            },
            { match: t(/\s+&\s+/, a(y)), relevance: 0 },
          ],
        },
        V = {
          begin: /</,
          end: />/,
          keywords: k,
          contains: [...v, ...B, ...U, S, Z],
        };
      Z.contains.push(V);
      const W = {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          keywords: k,
          contains: [
            "self",
            {
              match: t(w, /\s*:/),
              keywords: "_|0",
              relevance: 0,
            },
            ...v,
            ...B,
            ..._,
            ...M,
            I,
            K,
            ...q,
            ...U,
            Z,
          ],
        },
        G = { begin: /</, end: />/, contains: [...v, Z] },
        R = {
          begin: /\(/,
          end: /\)/,
          keywords: k,
          contains: [
            {
              begin: n(a(t(w, /\s*:/)), a(t(w, /\s+/, w, /\s*:/))),
              end: /:/,
              relevance: 0,
              contains: [
                {
                  className: "keyword",
                  match: /\b_\b/,
                },
                { className: "params", match: w },
              ],
            },
            ...v,
            ...B,
            ...M,
            I,
            K,
            ...U,
            Z,
            W,
          ],
          endsParent: !0,
          illegal: /["']/,
        },
        X = {
          match: [/func/, /\s+/, n(z.match, w, b)],
          className: { 1: "keyword", 3: "title.function" },
          contains: [G, R, d],
          illegal: [/\[/, /%/],
        },
        H = {
          match: [/\b(?:subscript|init[?!]?)/, /\s*(?=[<(])/],
          className: { 1: "keyword" },
          contains: [G, R, d],
          illegal: /\[|%/,
        },
        J = {
          match: [/operator/, /\s+/, b],
          className: {
            1: "keyword",
            3: "title",
          },
        },
        Q = {
          begin: [/precedencegroup/, /\s+/, y],
          className: {
            1: "keyword",
            3: "title",
          },
          contains: [Z],
          keywords: [...l, ...o],
          end: /}/,
        };
      for (const e of K.variants) {
        const a = e.contains.find((e) => "interpol" === e.label);
        a.keywords = k;
        const t = [...B, ..._, ...M, I, K, ...q];
        a.contains = [
          ...t,
          { begin: /\(/, end: /\)/, contains: ["self", ...t] },
        ];
      }
      return {
        name: "Swift",
        keywords: k,
        contains: [
          ...v,
          X,
          H,
          {
            beginKeywords: "struct protocol class extension enum actor",
            end: "\\{",
            excludeEnd: !0,
            keywords: k,
            contains: [
              e.inherit(e.TITLE_MODE, {
                className: "title.class",
                begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/,
              }),
              ...B,
            ],
          },
          J,
          Q,
          { beginKeywords: "import", end: /$/, contains: [...v], relevance: 0 },
          ...B,
          ..._,
          ...M,
          I,
          K,
          ...q,
          ...U,
          Z,
          W,
        ],
      };
    };
  })();
  hljs.registerLanguage("swift", e);
})(); /*! `typescript` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    const e = "[A-Za-z$_][0-9A-Za-z$_]*",
      n = [
        "as",
        "in",
        "of",
        "if",
        "for",
        "while",
        "finally",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break",
        "catch",
        "instanceof",
        "with",
        "throw",
        "case",
        "default",
        "try",
        "switch",
        "continue",
        "typeof",
        "delete",
        "let",
        "yield",
        "const",
        "class",
        "debugger",
        "async",
        "await",
        "static",
        "import",
        "from",
        "export",
        "extends",
      ],
      a = ["true", "false", "null", "undefined", "NaN", "Infinity"],
      t = [
        "Object",
        "Function",
        "Boolean",
        "Symbol",
        "Math",
        "Date",
        "Number",
        "BigInt",
        "String",
        "RegExp",
        "Array",
        "Float32Array",
        "Float64Array",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Int32Array",
        "Uint16Array",
        "Uint32Array",
        "BigInt64Array",
        "BigUint64Array",
        "Set",
        "Map",
        "WeakSet",
        "WeakMap",
        "ArrayBuffer",
        "SharedArrayBuffer",
        "Atomics",
        "DataView",
        "JSON",
        "Promise",
        "Generator",
        "GeneratorFunction",
        "AsyncFunction",
        "Reflect",
        "Proxy",
        "Intl",
        "WebAssembly",
      ],
      s = [
        "Error",
        "EvalError",
        "InternalError",
        "RangeError",
        "ReferenceError",
        "SyntaxError",
        "TypeError",
        "URIError",
      ],
      r = [
        "setInterval",
        "setTimeout",
        "clearInterval",
        "clearTimeout",
        "require",
        "exports",
        "eval",
        "isFinite",
        "isNaN",
        "parseFloat",
        "parseInt",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "unescape",
      ],
      c = [
        "arguments",
        "this",
        "super",
        "console",
        "window",
        "document",
        "localStorage",
        "sessionStorage",
        "module",
        "global",
      ],
      i = [].concat(r, t, s);
    function o(o) {
      const l = o.regex,
        d = e,
        b = {
          begin: /<[A-Za-z0-9\\._:-]+/,
          end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
          isTrulyOpeningTag: (e, n) => {
            const a = e[0].length + e.index,
              t = e.input[a];
            if ("<" === t || "," === t) return void n.ignoreMatch();
            let s;
            ">" === t &&
              (((e, { after: n }) => {
                const a = "</" + e[0].slice(1);
                return -1 !== e.input.indexOf(a, n);
              })(e, { after: a }) ||
                n.ignoreMatch());
            const r = e.input.substring(a);
            ((s = r.match(/^\s*=/)) ||
              ((s = r.match(/^\s+extends\s+/)) && 0 === s.index)) &&
              n.ignoreMatch();
          },
        },
        g = {
          $pattern: e,
          keyword: n,
          literal: a,
          built_in: i,
          "variable.language": c,
        },
        u = "[0-9](_?[0-9])*",
        m = `\\.(${u})`,
        E = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",
        y = {
          className: "number",
          variants: [
            {
              begin: `(\\b(${E})((${m})|\\.)?|(${m}))[eE][+-]?(${u})\\b`,
            },
            {
              begin: `\\b(${E})\\b((${m})\\b|\\.)?|(${m})\\b`,
            },
            {
              begin: "\\b(0|[1-9](_?[0-9])*)n\\b",
            },
            {
              begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b",
            },
            {
              begin: "\\b0[bB][0-1](_?[0-1])*n?\\b",
            },
            { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
            {
              begin: "\\b0[0-7]+n?\\b",
            },
          ],
          relevance: 0,
        },
        A = {
          className: "subst",
          begin: "\\$\\{",
          end: "\\}",
          keywords: g,
          contains: [],
        },
        p = {
          begin: "html`",
          end: "",
          starts: {
            end: "`",
            returnEnd: !1,
            contains: [o.BACKSLASH_ESCAPE, A],
            subLanguage: "xml",
          },
        },
        N = {
          begin: "css`",
          end: "",
          starts: {
            end: "`",
            returnEnd: !1,
            contains: [o.BACKSLASH_ESCAPE, A],
            subLanguage: "css",
          },
        },
        f = {
          begin: "gql`",
          end: "",
          starts: {
            end: "`",
            returnEnd: !1,
            contains: [o.BACKSLASH_ESCAPE, A],
            subLanguage: "graphql",
          },
        },
        _ = {
          className: "string",
          begin: "`",
          end: "`",
          contains: [o.BACKSLASH_ESCAPE, A],
        },
        h = {
          className: "comment",
          variants: [
            o.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
              relevance: 0,
              contains: [
                {
                  begin: "(?=@[A-Za-z]+)",
                  relevance: 0,
                  contains: [
                    { className: "doctag", begin: "@[A-Za-z]+" },
                    {
                      className: "type",
                      begin: "\\{",
                      end: "\\}",
                      excludeEnd: !0,
                      excludeBegin: !0,
                      relevance: 0,
                    },
                    {
                      className: "variable",
                      begin: d + "(?=\\s*(-)|$)",
                      endsParent: !0,
                      relevance: 0,
                    },
                    { begin: /(?=[^\n])\s/, relevance: 0 },
                  ],
                },
              ],
            }),
            o.C_BLOCK_COMMENT_MODE,
            o.C_LINE_COMMENT_MODE,
          ],
        },
        S = [
          o.APOS_STRING_MODE,
          o.QUOTE_STRING_MODE,
          p,
          N,
          f,
          _,
          { match: /\$\d+/ },
          y,
        ];
      A.contains = S.concat({
        begin: /\{/,
        end: /\}/,
        keywords: g,
        contains: ["self"].concat(S),
      });
      const v = [].concat(h, A.contains),
        w = v.concat([
          { begin: /\(/, end: /\)/, keywords: g, contains: ["self"].concat(v) },
        ]),
        R = {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: !0,
          excludeEnd: !0,
          keywords: g,
          contains: w,
        },
        x = {
          variants: [
            {
              match: [
                /class/,
                /\s+/,
                d,
                /\s+/,
                /extends/,
                /\s+/,
                l.concat(d, "(", l.concat(/\./, d), ")*"),
              ],
              scope: {
                1: "keyword",
                3: "title.class",
                5: "keyword",
                7: "title.class.inherited",
              },
            },
            {
              match: [/class/, /\s+/, d],
              scope: { 1: "keyword", 3: "title.class" },
            },
          ],
        },
        k = {
          relevance: 0,
          match: l.either(
            /\bJSON/,
            /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
            /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
            /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
          ),
          className: "title.class",
          keywords: { _: [...t, ...s] },
        },
        O = {
          variants: [
            {
              match: [/function/, /\s+/, d, /(?=\s*\()/],
            },
            { match: [/function/, /\s*(?=\()/] },
          ],
          className: { 1: "keyword", 3: "title.function" },
          label: "func.def",
          contains: [R],
          illegal: /%/,
        },
        C = {
          match: l.concat(
            /\b/,
            ((I = [...r, "super", "import"]),
            l.concat("(?!", I.join("|"), ")")),
            d,
            l.lookahead(/\(/),
          ),
          className: "title.function",
          relevance: 0,
        };
      var I;
      const T = {
          begin: l.concat(/\./, l.lookahead(l.concat(d, /(?![0-9A-Za-z$_(])/))),
          end: d,
          excludeBegin: !0,
          keywords: "prototype",
          className: "property",
          relevance: 0,
        },
        M = {
          match: [/get|set/, /\s+/, d, /(?=\()/],
          className: { 1: "keyword", 3: "title.function" },
          contains: [{ begin: /\(\)/ }, R],
        },
        B =
          "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" +
          o.UNDERSCORE_IDENT_RE +
          ")\\s*=>",
        $ = {
          match: [
            /const|var|let/,
            /\s+/,
            d,
            /\s*/,
            /=\s*/,
            /(async\s*)?/,
            l.lookahead(B),
          ],
          keywords: "async",
          className: { 1: "keyword", 3: "title.function" },
          contains: [R],
        };
      return {
        name: "JavaScript",
        aliases: ["js", "jsx", "mjs", "cjs"],
        keywords: g,
        exports: {
          PARAMS_CONTAINS: w,
          CLASS_REFERENCE: k,
        },
        illegal: /#(?![$_A-z])/,
        contains: [
          o.SHEBANG({ label: "shebang", binary: "node", relevance: 5 }),
          {
            label: "use_strict",
            className: "meta",
            relevance: 10,
            begin: /^\s*['"]use (strict|asm)['"]/,
          },
          o.APOS_STRING_MODE,
          o.QUOTE_STRING_MODE,
          p,
          N,
          f,
          _,
          h,
          { match: /\$\d+/ },
          y,
          k,
          {
            className: "attr",
            begin: d + l.lookahead(":"),
            relevance: 0,
          },
          $,
          {
            begin: "(" + o.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
            keywords: "return throw case",
            relevance: 0,
            contains: [
              h,
              o.REGEXP_MODE,
              {
                className: "function",
                begin: B,
                returnBegin: !0,
                end: "\\s*=>",
                contains: [
                  {
                    className: "params",
                    variants: [
                      { begin: o.UNDERSCORE_IDENT_RE, relevance: 0 },
                      {
                        className: null,
                        begin: /\(\s*\)/,
                        skip: !0,
                      },
                      {
                        begin: /\(/,
                        end: /\)/,
                        excludeBegin: !0,
                        excludeEnd: !0,
                        keywords: g,
                        contains: w,
                      },
                    ],
                  },
                ],
              },
              { begin: /,/, relevance: 0 },
              { match: /\s+/, relevance: 0 },
              {
                variants: [
                  { begin: "<>", end: "</>" },
                  {
                    match: /<[A-Za-z0-9\\._:-]+\s*\/>/,
                  },
                  {
                    begin: b.begin,
                    "on:begin": b.isTrulyOpeningTag,
                    end: b.end,
                  },
                ],
                subLanguage: "xml",
                contains: [
                  {
                    begin: b.begin,
                    end: b.end,
                    skip: !0,
                    contains: ["self"],
                  },
                ],
              },
            ],
          },
          O,
          {
            beginKeywords: "while if switch catch for",
          },
          {
            begin:
              "\\b(?!function)" +
              o.UNDERSCORE_IDENT_RE +
              "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
            returnBegin: !0,
            label: "func.def",
            contains: [
              R,
              o.inherit(o.TITLE_MODE, {
                begin: d,
                className: "title.function",
              }),
            ],
          },
          { match: /\.\.\./, relevance: 0 },
          T,
          { match: "\\$" + d, relevance: 0 },
          {
            match: [/\bconstructor(?=\s*\()/],
            className: { 1: "title.function" },
            contains: [R],
          },
          C,
          {
            relevance: 0,
            match: /\b[A-Z][A-Z_0-9]+\b/,
            className: "variable.constant",
          },
          x,
          M,
          { match: /\$[(.]/ },
        ],
      };
    }
    return (t) => {
      const s = o(t),
        r = e,
        l = [
          "any",
          "void",
          "number",
          "boolean",
          "string",
          "object",
          "never",
          "symbol",
          "bigint",
          "unknown",
        ],
        d = {
          beginKeywords: "namespace",
          end: /\{/,
          excludeEnd: !0,
          contains: [s.exports.CLASS_REFERENCE],
        },
        b = {
          beginKeywords: "interface",
          end: /\{/,
          excludeEnd: !0,
          keywords: { keyword: "interface extends", built_in: l },
          contains: [s.exports.CLASS_REFERENCE],
        },
        g = {
          $pattern: e,
          keyword: n.concat([
            "type",
            "namespace",
            "interface",
            "public",
            "private",
            "protected",
            "implements",
            "declare",
            "abstract",
            "readonly",
            "enum",
            "override",
          ]),
          literal: a,
          built_in: i.concat(l),
          "variable.language": c,
        },
        u = { className: "meta", begin: "@" + r },
        m = (e, n, a) => {
          const t = e.contains.findIndex((e) => e.label === n);
          if (-1 === t) throw Error("can not find mode to replace");
          e.contains.splice(t, 1, a);
        };
      return (
        Object.assign(s.keywords, g),
        s.exports.PARAMS_CONTAINS.push(u),
        (s.contains = s.contains.concat([u, d, b])),
        m(s, "shebang", t.SHEBANG()),
        m(s, "use_strict", {
          className: "meta",
          relevance: 10,
          begin: /^\s*['"]use strict['"]/,
        }),
        (s.contains.find((e) => "func.def" === e.label).relevance = 0),
        Object.assign(s, {
          name: "TypeScript",
          aliases: ["ts", "tsx", "mts", "cts"],
        }),
        s
      );
    };
  })();
  hljs.registerLanguage("typescript", e);
})(); /*! `vbscript-html` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => ({
      name: "VBScript in HTML",
      subLanguage: "xml",
      contains: [{ begin: "<%", end: "%>", subLanguage: "vbscript" }],
    });
  })();
  hljs.registerLanguage("vbscript-html", e);
})(); /*! `xml` grammar compiled for Highlight.js 11.8.0 */
(() => {
  var e = (() => {
    "use strict";
    return (e) => {
      const a = e.regex,
        n = a.concat(
          /[\p{L}_]/u,
          a.optional(/[\p{L}0-9_.-]*:/u),
          /[\p{L}0-9_.-]*/u,
        ),
        s = {
          className: "symbol",
          begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/,
        },
        t = {
          begin: /\s/,
          contains: [
            {
              className: "keyword",
              begin: /#?[a-z_][a-z1-9_-]+/,
              illegal: /\n/,
            },
          ],
        },
        i = e.inherit(t, { begin: /\(/, end: /\)/ }),
        c = e.inherit(e.APOS_STRING_MODE, {
          className: "string",
        }),
        l = e.inherit(e.QUOTE_STRING_MODE, { className: "string" }),
        r = {
          endsWithParent: !0,
          illegal: /</,
          relevance: 0,
          contains: [
            { className: "attr", begin: /[\p{L}0-9._:-]+/u, relevance: 0 },
            {
              begin: /=\s*/,
              relevance: 0,
              contains: [
                {
                  className: "string",
                  endsParent: !0,
                  variants: [
                    { begin: /"/, end: /"/, contains: [s] },
                    {
                      begin: /'/,
                      end: /'/,
                      contains: [s],
                    },
                    { begin: /[^\s"'=<>`]+/ },
                  ],
                },
              ],
            },
          ],
        };
      return {
        name: "HTML, XML",
        aliases: [
          "html",
          "xhtml",
          "rss",
          "atom",
          "xjb",
          "xsd",
          "xsl",
          "plist",
          "wsf",
          "svg",
        ],
        case_insensitive: !0,
        unicodeRegex: !0,
        contains: [
          {
            className: "meta",
            begin: /<![a-z]/,
            end: />/,
            relevance: 10,
            contains: [
              t,
              l,
              c,
              i,
              {
                begin: /\[/,
                end: /\]/,
                contains: [
                  {
                    className: "meta",
                    begin: /<![a-z]/,
                    end: />/,
                    contains: [t, i, l, c],
                  },
                ],
              },
            ],
          },
          e.COMMENT(/<!--/, /-->/, { relevance: 10 }),
          { begin: /<!\[CDATA\[/, end: /\]\]>/, relevance: 10 },
          s,
          {
            className: "meta",
            end: /\?>/,
            variants: [
              { begin: /<\?xml/, relevance: 10, contains: [l] },
              { begin: /<\?[a-z][a-z0-9]+/ },
            ],
          },
          {
            className: "tag",
            begin: /<style(?=\s|>)/,
            end: />/,
            keywords: { name: "style" },
            contains: [r],
            starts: {
              end: /<\/style>/,
              returnEnd: !0,
              subLanguage: ["css", "xml"],
            },
          },
          {
            className: "tag",
            begin: /<script(?=\s|>)/,
            end: />/,
            keywords: { name: "script" },
            contains: [r],
            starts: {
              end: /<\/script>/,
              returnEnd: !0,
              subLanguage: ["javascript", "handlebars", "xml"],
            },
          },
          {
            className: "tag",
            begin: /<>|<\/>/,
          },
          {
            className: "tag",
            begin: a.concat(
              /</,
              a.lookahead(a.concat(n, a.either(/\/>/, />/, /\s/))),
            ),
            end: /\/?>/,
            contains: [
              { className: "name", begin: n, relevance: 0, starts: r },
            ],
          },
          {
            className: "tag",
            begin: a.concat(/<\//, a.lookahead(a.concat(n, />/))),
            contains: [
              {
                className: "name",
                begin: n,
                relevance: 0,
              },
              { begin: />/, relevance: 0, endsParent: !0 },
            ],
          },
        ],
      };
    };
  })();
  hljs.registerLanguage("xml", e);
})();
